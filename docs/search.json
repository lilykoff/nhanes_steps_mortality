[
  {
    "objectID": "vignettes/Analysis.html",
    "href": "vignettes/Analysis.html",
    "title": "NHANES Mortality Analysis",
    "section": "",
    "text": "Code\n# load packages \nlibrary(tidyverse)\nlibrary(gtsummary)\nlibrary(gt)\nlibrary(tidymodels)\nlibrary(censored)\nlibrary(paletteer)\nlibrary(survey)\nlibrary(patchwork)\n# paletteer_d(\"colorBlindness::PairedColor12Steps\")\ncol1 = \"#FF9932\"; col2 = \"#65CCFF\"\ncol1 = \"#CC5151\"; col2 = \"#422CB2\"\n# paletteer_d(\"ggthemes::colorblind\")\ncol_vec = c(\"#000000FF\", \"#009E73FF\", \"#CC79A7FF\", \"#E69F00FF\", \"#D55E00FF\", \"#56B4E9FF\", \"#0072B2FF\")\n\n# load data \n# results from univariate\nwt_single_male = readRDS(here::here(\"results\", \"metrics_wtd_100_singlevar_male.rds\"))\nwt_single_female = readRDS(here::here(\"results\", \"metrics_wtd_100_singlevar_female.rds\"))\nwt_single = readRDS(here::here(\"results\", \"metrics_wtd_100_singlevar.rds\")) %&gt;% \n  group_by(variable) %&gt;% \n  mutate(ind = row_number(),\n         rep = floor((row_number()-1)/10)) %&gt;% \n  group_by(variable, rep) %&gt;% \n  summarize(concordance = mean(concordance))\n\n\n# results from multivariable\nwt_male = readRDS(here::here(\"results\", \"metrics_wtd_100_male.rds\"))\nwt_female = readRDS(here::here(\"results\", \"metrics_wtd_100_female.rds\"))\nwt_all = readRDS(here::here(\"results\", \"metrics_wtd_100.rds\")) %&gt;% \n   group_by(model) %&gt;% \n  mutate(ind = row_number(),\n         rep = floor((row_number()-1)/10)) %&gt;% \n  group_by(model, rep) %&gt;% \n  summarize(concordance = mean(concordance))\n\n\n# covariate/pa df \ndf_all = readRDS(here::here(\"data\", \"covariates_accel_mortality_df.rds\"))"
  },
  {
    "objectID": "vignettes/Analysis.html#distribution-of-pa-variables",
    "href": "vignettes/Analysis.html#distribution-of-pa-variables",
    "title": "NHANES Mortality Analysis",
    "section": "Distribution of PA Variables",
    "text": "Distribution of PA Variables\nProbably supplemental\n\n\nCode\ndf_accel %&gt;%\n  select(contains(\"steps\") & contains(\"total\"), SEQN) %&gt;% \n  pivot_longer(cols = -c(SEQN)) %&gt;% \n  mutate(type = \"Raw\") %&gt;% \n  bind_rows(df_accel_win %&gt;%\n              select(contains(\"steps\") & contains(\"total\"), SEQN) %&gt;% \n              pivot_longer(cols = -c(SEQN)) %&gt;% \n              mutate(type = \"Winsorized\")) %&gt;%\n  mutate(name = factor(name, labels = c(\"Actilife steps\", \"ADEPT\", \"Oak\", \"Stepcount RF\", \"Stepcount SSL\", \"Verisense\", \"Verisense rev.\"))) %&gt;% \n  ggplot(aes(x = value / 1000, fill = type, col = type))+\n  geom_density() + \n  facet_wrap(type~name, scales = \"free\", nrow = 2)+\n  theme_bw() + \n  scale_fill_manual(values = c(col1, col2))+\n  scale_color_manual(values = c(col1, col2))+\n  theme(legend.position = \"none\",\n        panel.grid.minor.x = element_blank(),\n        axis.title = element_text(size = 14)) + \n  labs(x = \"Mean Daily Steps x 1000\", y = \"Density\", title = \"Distribution of Mean Daily Step Counts\",\n       subtitle = \"All Individuals aged 18+ with Valid Accelerometry Data\")\n\n\n\n\n\n\n\n\n\nCode\ndir.create(here::here(\"manuscript\", \"figures\"), showWarnings = FALSE,\n           recursive = TRUE)\nggsave(here::here(\"manuscript\", \"figures\", \"step_distributions.png\"), dpi = 400, width = 10, height = 8)\n\ndf_accel %&gt;%\n  select(!contains(\"steps\") & contains(\"total\"), SEQN) %&gt;% \n  pivot_longer(cols = -c(SEQN)) %&gt;% \n  mutate(type = \"Raw\") %&gt;% \n  bind_rows(df_accel_win %&gt;%\n              select(!contains(\"steps\") & contains(\"total\"), SEQN) %&gt;% \n              pivot_longer(cols = -c(SEQN)) %&gt;% \n              mutate(type = \"Winsorized\")) %&gt;%\n  mutate(name = factor(name, labels = c(\"AC\", \"log10 AC\", \"MIMS\", \"log10 MIMS\"))) %&gt;% \n  ggplot(aes(x = value / 1000, fill = type, col = type))+\n  geom_density() + \n  facet_wrap(type~name, scales = \"free\", nrow = 2)+\n  theme_bw() + \n  scale_fill_manual(values = c(col1, col2))+\n  scale_color_manual(values = c(col1, col2))+\n  theme(legend.position = \"none\",\n        panel.grid.minor.x = element_blank(),\n        axis.title = element_text(size = 14)) + \n  labs(x = \"Mean Daily Value x 1000\", y = \"Density\", title = \"Distribution of Mean PA\",\n       subtitle = \"All Individuals aged 18+ with Valid Accelerometry Data\")\n\n\n\n\n\n\n\n\n\nCode\nggsave(here::here(\"manuscript\", \"figures\", \"pa_distributions.png\"), dpi = 400, width = 10, height = 8)"
  },
  {
    "objectID": "vignettes/Analysis.html#mean-step-counts-and-peak-cadence-by-age-and-sex",
    "href": "vignettes/Analysis.html#mean-step-counts-and-peak-cadence-by-age-and-sex",
    "title": "NHANES Mortality Analysis",
    "section": "Mean Step Counts and Peak Cadence by Age and Sex",
    "text": "Mean Step Counts and Peak Cadence by Age and Sex\nTent. Figure 1\n\n\nCode\ndf_means = df_accel %&gt;%\n  filter(age_in_years_at_screening &gt;= 18 & age_in_years_at_screening &lt; 80) %&gt;% \n  mutate(weight = full_sample_2_year_mec_exam_weight / 2,\n         weight_norm = weight / mean(weight)) %&gt;% \n  ungroup() \n\n# survey_design &lt;- svydesign(ids = ~1, weights = ~weight, data = df)\nsurvey_design = survey::svydesign(\n  id = ~ masked_variance_pseudo_psu,\n  strata = ~ masked_variance_pseudo_stratum,\n  weights = ~ weight_norm,\n  data = df_means,\n  nest = TRUE\n)\n\n# Calculate mean estimate by age\ncalc_by_age =\n  function(var, df) {\n    formula = as.formula(paste(\"~\", var))\n    total_by_age_gender = svyby(formula,\n                               ~ age_in_years_at_screening,\n                               df,\n                               svymean) %&gt;%\n      rename(mean = contains(var)) %&gt;%\n      mutate(metric = var)\n  }\n\nmeans_df = \n  map_dfr(.x = df_means %&gt;% select(contains(\"total\") | contains(\"peak\")) %&gt;% colnames(),\n          .f = calc_by_age, df = survey_design)\n\nmodels = means_df %&gt;%\n   mutate(lb = mean - 1.96 * se,\n         ub = mean + 1.96 * se) %&gt;% \n        tidyr::nest(data = -c(metric)) %&gt;%\n        dplyr::mutate(\n                # Perform loess calculation on each group\n                m = purrr::map(data, loess,\n                               formula = mean ~ age_in_years_at_screening, span = .75),\n                # Retrieve the fitted values from each model\n                fitted_mean = purrr::map(m, `[[`, \"fitted\"),\n                l = purrr::map(data, loess,\n                               formula = lb ~ age_in_years_at_screening, span = .75),\n                # Retrieve the fitted values from each model\n                fitted_lb = purrr::map(l, `[[`, \"fitted\"),\n                u = purrr::map(data, loess,\n                               formula = ub ~ age_in_years_at_screening, span = .75),\n                # Retrieve the fitted values from each model\n                fitted_ub = purrr::map(u, `[[`, \"fitted\")\n        )\n\n# Apply fitted y's as a new column\nresults = models %&gt;%\n        dplyr::select(-m, -l, -u) %&gt;%\n        tidyr::unnest(cols = c(data, contains(\"fitted\")))\n\n\n\n\nCode\nnames(col_vec) = c(\"Actilife\", \"ADEPT\", \"Oak\", \"Stepcount RF\",\"Stepcount SSL\", \"Verisense\", \"Verisense rev.\")\np1 = results %&gt;% \n  filter(grepl(\"step\", metric) & grepl(\"total\", metric)) %&gt;%\n  mutate(across(contains(\"fitted\"), ~.x / 1000),\n                metric = factor(metric, levels = c(\"total_actisteps\", \n                                            \"total_adeptsteps\",\n                                            \"total_oaksteps\",\n                                              \"total_scrfsteps\",\n                                            \"total_scsslsteps\",\n                                            \"total_vssteps\",\n                                            \"total_vsrevsteps\"),\n                         labels = c(\"Actilife\", \"ADEPT\", \"Oak\", \"Stepcount RF\", \"Stepcount SSL\",\n                                    \"Verisense\", \"Verisense rev.\"))) %&gt;% \n  ggplot(aes(x = age_in_years_at_screening, y = fitted_mean,\n             ymin = fitted_lb, ymax = fitted_ub, color = metric, fill = metric)) +\n  facet_grid(. ~ metric) +\n  geom_line(linewidth = 1) + \n  geom_ribbon(alpha = .2, linetype = 0) +\n  scale_fill_manual(values = col_vec, name = \"Algorithm\") + \n  theme_light() + \n  scale_color_manual(values = col_vec, name = \"Algorithm\") + \n  geom_hline(aes(yintercept = 10), col = \"darkgrey\", linetype = \"dashed\") +\n  theme(legend.position = \"bottom\",\n        legend.title = element_blank(),\n        strip.text = element_text(size = 12)) +\n  labs(x = \"Age (years)\", y = \"Mean Daily Steps x 1000\",\n       title = \"Smoothed Survey Weighted Mean Daily Steps by Age \")+\n  scale_y_continuous(breaks=seq(0,16,1))+\n    scale_x_continuous(breaks=seq(20,80,10))\n\np1\n\n\n\n\n\n\n\n\n\nCode\np2 = results %&gt;% \n  filter(grepl(\"peak\", metric) & grepl(\"step\", metric)) %&gt;% \n  mutate(type = sub(\"_.*\", \"\", metric),\n         method = sub(\"^[^_]*_\", \"\", metric),\n         type = factor(type, labels = c(\"1-minute\", \"30-minute\"))) %&gt;% \n  filter(grepl(\"step\", metric)) %&gt;%\n  mutate(method = factor(method, levels = c(\"actisteps\", \n                                            \"adeptsteps\",\n                                            \"oaksteps\",\n                                            \"scrfsteps\",\n                                            \"scsslsteps\",\n                                            \"vssteps\",\n                                            \"vsrevsteps\"),\n                         labels = c(\"Actilife\", \"ADEPT\", \"Oak\", \"Stepcount RF\", \"Stepcount SSL\", \"Verisense\", \"Verisense rev.\"))) %&gt;% \n  ggplot(aes(x = age_in_years_at_screening, y = fitted_mean,\n             ymin = fitted_lb, ymax = fitted_ub, fill = method, color = method)) +\n  facet_grid(. ~ type) +\n  # geom_line(aes(linetype = type)) + \n  geom_line() + \n  geom_ribbon(alpha = 0.2, color = NA) + \n  # geom_ribbon(alpha = .2, aes(linetype = type), color = NA) +\n  scale_fill_manual(values = col_vec, name = \"Algorithm\") + \n  scale_color_manual(values = col_vec, name = \"Algorithm\") + \n  theme_light() +\n  # scale_linetype_discrete(labels = c(\"1 Minute\", \"30 Minute\"), guide = F) + \n  theme(legend.position = \"bottom\",\n        legend.title = element_blank(),\n        strip.text =  element_text(size = 12)) +\n  labs(x = \"Age (years)\", y = \"Peak Cadence (steps/min)\",\n       title = \"Smoothed Survey Weighted Peak Cadence by Age\")+\n    scale_y_continuous(breaks=seq(20, 120,10))+\n  scale_x_continuous(breaks=seq(20,80,10))\np2\n\n\n\n\n\n\n\n\n\n\n\nCode\np3 = means_df %&gt;% \n  filter(grepl(\"step\", metric) & grepl(\"total\", metric)) %&gt;% \n  mutate(metric = factor(metric, levels = c(\"total_actisteps\", \n                                            \"total_adeptsteps\",\n                                            \"total_oaksteps\",\n                                              \"total_scrfsteps\",\n                                            \"total_scsslsteps\",\n                                            \"total_vssteps\",\n                                            \"total_vsrevsteps\"),\n                         labels = c(\"Actilife\", \"ADEPT\", \"Oak\", \"Stepcount RF\", \"Stepcount SSL\",\n                                    \"Verisense\", \"Verisense rev.\"))) %&gt;% \n    group_by(metric) %&gt;% \n  mutate(pct_chg = (mean - lag(mean))/lag(mean)*100) %&gt;% \n  ggplot(aes(x = age_in_years_at_screening, y = pct_chg, color = metric))+\n  geom_smooth(method = \"loess\", se = FALSE) +\n  # geom_line() +\n  scale_color_manual(values = col_vec, name = \"Algorithm\") + \n  geom_hline(aes(yintercept = 0), col = \"darkgrey\", linetype = \"dashed\") + \n  theme_light() + \n  labs(x = \"Age (years)\", y = \"% change from previous year\",\n       title = \"Survey weighted estimated per-year difference in mean daily steps\")+\n  theme(legend.position = c(.1, .4))+\n    scale_x_continuous(breaks=seq(20,80,10))+\n  scale_y_continuous(breaks=seq(-5, 5, 1))\n\np3 \n\n\n\n\n\n\n\n\n\nCode\nmeans_df %&gt;% \n  filter(grepl(\"total\", metric) & grepl(\"step\", metric)) %&gt;% \n  mutate(metric = factor(metric, levels = c(\"total_actisteps\",\n                                            \"total_adeptsteps\",\n                                            \"total_oaksteps\",\n                                            \"total_vssteps\",\n                                            \"total_vsrevsteps\",\n                                            \"total_scsslsteps\",\n                                            \"total_scrfsteps\"),\n                         labels = c(\"Actilife\", \"ADEPT\", \"Oak\", \"Verisense\", \"Verisense rev.\", \"Stepcount SSL\", \"Stepcount RF\"))) %&gt;%\n    group_by(metric) %&gt;% \n  mutate(pct_chg = (mean - lag(mean))/lag(mean)*100) %&gt;% \n  ggplot(aes(x = age_in_years_at_screening, y = pct_chg, color = metric))+\n  geom_smooth(method = \"loess\", se = FALSE) + \n  scale_color_brewer(palette = \"Dark2\", name = \"\") + \n  geom_hline(aes(yintercept = 0), col = \"darkgrey\", linetype = \"dashed\") + \n  theme_light() + \n  labs(x = \"Age (yrs)\", y = \"Percent Change in Mean Daily Steps\",\n       title = \"Percent Change in Mean Daily Steps by Age\")+\n  theme(legend.position = c(.1, .4),\n        legend.title = element_blank())\n\n\n\n\n\n\n\n\n\nCode\nmeans_df %&gt;% \n  filter(grepl(\"total\", metric) & grepl(\"step\", metric)) %&gt;% \n  mutate(metric = factor(metric, levels = c(\"total_actisteps\",\n                                            \"total_adeptsteps\",\n                                            \"total_oaksteps\",\n                                            \"total_vssteps\",\n                                            \"total_vsrevsteps\",\n                                            \"total_scsslsteps\",\n                                            \"total_scrfsteps\"),\n                         labels = c(\"Actilife\", \"ADEPT\", \"Oak\", \"Verisense\", \"Verisense rev.\", \"Stepcount SSL\", \"Stepcount RF\"))) %&gt;%\n    group_by(metric) %&gt;% \n  mutate(pct_chg = (mean - lag(mean))/lag(mean)*100,\n         chg = mean - lag(mean)) %&gt;% \n  ggplot(aes(x = age_in_years_at_screening, y = chg, color = metric))+\n  geom_smooth(method = \"loess\", se = FALSE) + \n  scale_color_brewer(palette = \"Dark2\", name = \"\") + \n  geom_hline(aes(yintercept = 0), col = \"darkgrey\", linetype = \"dashed\") + \n  theme_light() + \n  labs(x = \"Age (yrs)\", y = \"Percent Change in Mean Daily Steps\",\n       title = \"Change in Mean Daily Steps by Age\")+\n  theme(legend.position = c(.1, .27),\n        legend.title = element_blank())\n\n\n\n\n\n\n\n\n\nCode\np1 / (p2 + p3 ) + plot_layout(guides = \"collect\", nrow = 2, axis_titles = \"collect\") + plot_annotation(tag_levels = 'A') & theme(legend.position = 'bottom')\n\n\n\n\n\n\n\n\n\nCode\nggsave(here::here(\"manuscript\", \"figures\", \"distributions.png\"), dpi = 400, width = 10, height = 8)\n\n\n\n\nCode\n# calculate in age grps of 5 \ndf_means = df_accel %&gt;%\n  filter(age_in_years_at_screening &gt;= 18 & age_in_years_at_screening &lt; 80) %&gt;% \n  mutate(weight = full_sample_2_year_mec_exam_weight / 2,\n         weight_norm = weight / mean(weight)) %&gt;% \n  ungroup() %&gt;% \n  mutate(age_grp = cut(age_in_years_at_screening, breaks = c(seq(18, 73, 5), 80), include.lowest = TRUE))\n\n# survey_design &lt;- svydesign(ids = ~1, weights = ~weight, data = df)\nsurvey_design = survey::svydesign(\n  id = ~ masked_variance_pseudo_psu,\n  strata = ~ masked_variance_pseudo_stratum,\n  weights = ~ weight_norm,\n  data = df_means,\n  nest = TRUE\n)\n\n# Calculate mean estimate by age\ncalc_by_age_group =\n  function(var, df) {\n    # var = \"total_oaksteps\"\n    formula = as.formula(paste(\"~\", var))\n    total_by_age_gender = svyby(formula,\n                               ~ age_grp,\n                               survey_design,\n                               svymean) %&gt;%\n      rename(mean = contains(var)) %&gt;%\n      mutate(metric = var)\n  }\n\ncats_df = \n  map_dfr(.x = df_means %&gt;% select(contains(\"total\") | contains(\"peak\")) %&gt;% colnames(),\n          .f = calc_by_age_group, df = df)\n\nchg_df = \n  cats_df %&gt;% \n  group_by(metric) %&gt;% \n  mutate(pct_chg = (mean - lag(mean)) / lag(mean) * 100)\n\nchg_df %&gt;% \n  filter(grepl(\"step\", metric) & grepl(\"total\", metric)) %&gt;% \n  ggplot(aes(x = age_grp, y = pct_chg, color = metric, group = metric)) + \n  geom_step()+\n  facet_wrap(.~metric, nrow = 1)\n\nmeans_df %&gt;% \n  filter(grepl(\"step\", metric) & grepl(\"total\", metric)) %&gt;% \n    group_by(metric) %&gt;% \n  mutate(pct_chg = (mean - lag(mean))/lag(mean)*100) %&gt;% \n  ggplot(aes(x = age_in_years_at_screening, y = pct_chg, color = metric))+\n  geom_smooth(method = \"loess\", se = FALSE)\n  # facet_wrap(.~metric, nrow  = 1)"
  },
  {
    "objectID": "vignettes/Analysis.html#correlations-between-step-counts-and-acmims",
    "href": "vignettes/Analysis.html#correlations-between-step-counts-and-acmims",
    "title": "NHANES Mortality Analysis",
    "section": "Correlations between Step Counts and AC/MIMS",
    "text": "Correlations between Step Counts and AC/MIMS\nFigure 2?\n\n\nCode\nmean_mat &lt;- function(df, abs = FALSE) {\n  # Ensure the input is a dataframe\n  if (!is.data.frame(df)) {\n    stop(\"Input must be a dataframe\")\n  }\n  \n  # Check if all columns are numeric\n  if (!all(sapply(df, is.numeric))) {\n    stop(\"All columns in the dataframe must be numeric\")\n  }\n  \n  # Get the number of columns\n  num_cols &lt;- ncol(df)\n  \n  # Initialize a matrix to store the mean absolute differences\n  mad_matrix &lt;- matrix(NA, nrow = num_cols, ncol = num_cols)\n  rownames(mad_matrix) &lt;- colnames(df)\n  colnames(mad_matrix) &lt;- colnames(df)\n  \n  # Calculate the mean absolute difference for each pair of columns\n  for (i in 1:num_cols) {\n    for (j in 1:num_cols) {\n      if (i &lt;= j) {\n        # Calculate mean absolute difference, handling potential NAs\n        if(abs){\n          d = abs(df[, i] - df[, j])\n        }\n        else{\n          d = df[, i] - df[, j]\n        }\n        # Debug output\n        # print(paste(\"Calculating MAD for columns\", colnames(df)[i], \"and\", colnames(df)[j]))\n        # print(head(abs_diff))\n        \n        # Calculate mean\n        # mad_matrix[i, j] &lt;- mean(abs_diff %&gt;% unlist, na.rm = TRUE)\n        mad_matrix[i, j] &lt;- mean(d %&gt;% unlist, na.rm = TRUE)\n        mad_matrix[j, i] &lt;- mad_matrix[i, j]  # Symmetric matrix\n      }\n    }\n  }\n  \n  return(mad_matrix)\n}\n\n\n\n\nCode\ncor_mat = \n  df_accel %&gt;% select(contains(\"total\")) %&gt;% \n  select(contains(\"acti\"), contains(\"adept\"), contains(\"oak\"), contains(\"sc\"), contains(\"vss\"), contains(\"vsr\"),\n         total_AC, total_PAXMTSM, total_log10AC, total_log10PAXMTSM) %&gt;% \n  cor(., use = \"complete\", method = \"spearman\") \npvals = df_accel %&gt;% select(contains(\"total\")) %&gt;% \n  select(contains(\"acti\"), contains(\"adept\"), contains(\"oak\"), contains(\"sc\"), contains(\"vss\"), contains(\"vsr\"),\n        total_AC, total_PAXMTSM, total_log10AC, total_log10PAXMTSM) %&gt;% \n  rstatix::cor_pmat(.) %&gt;% \n  select(-rowname) %&gt;% \n  as.matrix()\n\n\ncolnames(cor_mat) = rownames(cor_mat) =colnames(pvals) = rownames(pvals) = c(\"Actilife steps\", \"ADEPT\", \"Oak\", \n                                                                             \"Stepcount RF\", \"Stepcount SSL\", \n                                                                             \"Verisense\", \"Verisense rev.\", \"AC\", \n                                                                            \"MIMS\",  \"log10 AC\", \"log10 MIMS\")\n\nr = c(\"ADEPT\",\"Actilife steps\", \"Verisense rev.\",  \"Verisense\")\n\ncorrplot::corrplot(cor_mat,  \n         method=\"color\", \n         type=\"upper\", \n        col= paletteer_d(\"colorBlindness::Blue2Orange8Steps\"),\n         tl.col=\"black\", \n         tl.srt=30, \n         p.mat = pvals,\n         col.lim=c(0.2,1),\n         sig.level = 0.05, \n         insig = \"blank\",\n         is.corr = FALSE,\n        addgrid.col = \"white\",\n        diag = FALSE,\n        title = \"Spearman Correlations\",\n        addCoef.col = 'grey50') %&gt;% \n  corrplot::corrRect(namesMat  = r)\n\n\n\n\n\n\n\n\n\nCode\n# min(diff_mat[diff_mat != 0], na.rm = TRUE)\n\ndiff_mat = \n  df_accel %&gt;% select(contains(\"total\")) %&gt;% \n  select(contains(\"acti\"), contains(\"adept\"), contains(\"oak\"), contains(\"sc\"), contains(\"vss\"), contains(\"vsr\"),\n         total_AC, total_PAXMTSM, total_log10AC, total_log10PAXMTSM) %&gt;% \n  mean_mat()\n\nabs_diff_mat = \n  df_accel %&gt;% select(contains(\"total\")) %&gt;% \n  select(contains(\"acti\"), contains(\"adept\"), contains(\"oak\"), contains(\"sc\"), contains(\"vss\"), contains(\"vsr\"),\n         total_AC, total_PAXMTSM, total_log10AC, total_log10PAXMTSM) %&gt;% \n  mean_mat(., abs = TRUE)\n\n# mean_diff_mat = round(mean_diff_mat, digits = 0)\n\ndiff_mat[,c(\"total_AC\", \"total_log10AC\", \"total_PAXMTSM\", \"total_log10PAXMTSM\")] &lt;- NA\ndiff_mat[c(\"total_AC\", \"total_log10AC\", \"total_PAXMTSM\", \"total_log10PAXMTSM\"),] &lt;- NA\ncolnames(diff_mat) = rownames(diff_mat) = c(\"Actilife steps\", \"ADEPT\", \"Oak\", \n                                                                             \"Stepcount RF\", \"Stepcount SSL\", \n                                                                             \"Verisense\", \"Verisense rev.\", \"AC\", \n                                                                            \"MIMS\",  \"log10 AC\", \"log10 MIMS\")\ndiff_mat = diff_mat / 1000\ncorrplot::corrplot(diff_mat,  \n         method=\"color\", \n         type=\"lower\", \n        col= paletteer_c(\"grDevices::Purple-Green\", 10),\n        col.lim=c(-10, 10),\n         tl.col=\"black\", \n         tl.srt=30, \n         insig = \"blank\",\n         is.corr = FALSE,\n         diag = FALSE,\n        title = \"Mean Difference in Steps (x1000)\",\n         addgrid.col = \"white\",\n        # addCoef.col = 'black',\n        na.label = \"-\")\n\n\n\n\n\n\n\n\n\nCode\nabs_diff_mat[,c(\"total_AC\", \"total_log10AC\", \"total_PAXMTSM\", \"total_log10PAXMTSM\")] &lt;- NA\nabs_diff_mat[c(\"total_AC\", \"total_log10AC\", \"total_PAXMTSM\", \"total_log10PAXMTSM\"),] &lt;- NA\ncolnames(abs_diff_mat) =rownames(abs_diff_mat) = c(\"Actilife steps\", \"ADEPT\", \"Oak\", \n                                                                             \"Stepcount RF\", \"Stepcount SSL\", \n                                                                             \"Verisense\", \"Verisense rev.\", \"AC\", \n                                                                            \"MIMS\",  \"log10 AC\", \"log10 MIMS\")\nabs_diff_mat = abs_diff_mat / 1000\np = corrplot::corrplot(abs_diff_mat,  \n         method=\"color\", \n         type=\"lower\", \n        col= paletteer_c(\"grDevices::Purple-Green\", 10, direction = -1),\n        col.lim=c(0, 10),\n         tl.col=\"black\", \n         tl.srt=30, \n         insig = \"blank\",\n         is.corr = FALSE,\n         diag = FALSE,\n        title = \"Mean Absolute Difference\",\n         addgrid.col = \"white\",\n        # addCoef.col = 'black',\n        na.label = \"-\")\n\n\n\n\n\n\n\n\n\n\n\nCode\nmean_diff_mat = df_accel %&gt;% \n  select((contains(\"total\"))) %&gt;% \n  filter(!is.na(total_vssteps)) %&gt;% \n  mean_mat(abs = TRUE)\n\n# mean_diff_mat = round(mean_diff_mat, digits = 0)\n\nmean_diff_mat[,c(\"total_AC\", \"total_log10AC\", \"total_PAXMTSM\", \"total_log10PAXMTSM\")] &lt;- NA\nmean_diff_mat[c(\"total_AC\", \"total_log10AC\", \"total_PAXMTSM\", \"total_log10PAXMTSM\"),] &lt;- NA\ncor_mat = \n  df_accel %&gt;% select(contains(\"total\")) %&gt;%\n  cor(., use = \"complete\", method = \"spearman\") \npvals = df_accel %&gt;% select(contains(\"total\")) %&gt;%\n  rstatix::cor_pmat(.) %&gt;% \n  select(-rowname) %&gt;% \n  as.matrix()\ncolnames(cor_mat) = rownames(cor_mat) =colnames(pvals) = rownames(pvals) = c(\"AC\", \"Actilife\", \"ADEPT\", \"log10 AC\", \"log10 MIMS\", \"Oak\", \"MIMS\", \"Sc. RF\", \"Sc. SSL\", \"Vs rev.\", \"Vs\")\n\n\ncolnames(mean_diff_mat) = rownames(mean_diff_mat) = c(\"AC\", \"Actilife\", \"ADEPT\", \"log10 AC\", \"log10 MIMS\", \"Oak\", \"MIMS\", \"Sc. RF\", \"Sc. SSL\", \"Vs rev.\", \"Vs\")\n\ncorrplot::corrplot(cor_mat,  \n         method=\"circle\", \n         type=\"lower\", \n         # col=paletteer_d(\"colorBlindness::Blue2DarkRed12Steps\"), \n        col= paletteer_d(\"colorBlindness::Blue2Orange8Steps\"),\n         tl.col=\"black\", \n         tl.srt=45, \n         p.mat = pvals,\n         col.lim=c(0.2,1),\n         sig.level = 0.05, \n         insig = \"blank\",\n         is.corr = FALSE,\n        diag = FALSE,\n         order = \"AOE\",\n        title = \"Spearman Correlations\",\n        addCoef.col = 'black') \n\n\n\n\n\n\n\n\n\nCode\ncorrplot::corrplot(mean_diff_mat,  \n         method=\"color\", \n         type=\"lower\", \n         # col=paletteer_d(\"colorBlindness::Blue2DarkRed12Steps\"), \n        col= paletteer_d(\"colorBlindness::Blue2Orange8Steps\"),\n         tl.col=\"black\", \n         tl.srt=45, \n         # p.mat = pvals,\n         # col.lim=c(0.2,1),\n         # sig.level = 0.05, \n         insig = \"blank\",\n         is.corr = FALSE,\n         diag = FALSE,\n         # order = \"AOE\",\n        title = \"Mean Absolute Difference\",\n        addCoef.col = 'black',\n        na.label = \"-\") \n\n\n\n\n\n\n\n\n\nCode\ncorrplot::corrplot(mean_diff_mat,  \n         method=\"color\", \n         type=\"upper\", \n         # col=paletteer_d(\"colorBlindness::Blue2DarkRed12Steps\"), \n        col= paletteer_d(\"colorBlindness::Blue2Orange8Steps\"),\n         tl.col=\"black\", \n         tl.srt=45, \n         # p.mat = pvals,\n         # col.lim=c(0.2,1),\n         # sig.level = 0.05, \n         insig = \"blank\",\n         is.corr = FALSE,\n         diag = FALSE,\n         # order = \"AOE\",\n        title = \"Mean Absolute Difference\",\n        addCoef.col = 'black',\n        na.label = \"-\")"
  },
  {
    "objectID": "vignettes/Analysis.html#single-variable-mortality-prediction",
    "href": "vignettes/Analysis.html#single-variable-mortality-prediction",
    "title": "NHANES Mortality Analysis",
    "section": "Single variable mortality prediction",
    "text": "Single variable mortality prediction\nFigure 3?\n\n\nCode\n# make label df \nvar_labels = \n  tibble(names = \n           unique(wt_single$variable),\n         labels = c(\"Age at screening\", \"Diabetes\", \"Mobility problem\",\n                    \"Cancer\", \"Alcohol use\", \n                    \"BMI Category\", \"Education level\", \"Smoking status\",\n                    \"CHF\", \"CHD\", \"Gender\", \"Self-reported health\", \"Heart attack\", \"Peak1 AC\", \"Peak1 MIMS\", \"Peak1 Actilife steps\",\n                    \"Peak1 ADEPT steps\", \"Peak1 log10 AC\", \"Peak1 log10 MIMS\", \"Peak1 Oak steps\",\n                    \"Peak1 Stepcount RF steps\", \"Peak1 Stepcount SSL steps\", \"Peak1 Verisense rev. steps\",\n                    \"Peak1 Verisense steps\", \n                    \"Peak30 AC\", \"Peak30 MIMS\", \"Peak30 Actilife steps\",\n                    \"Peak30 ADEPT steps\", \"Peak30 log10 AC\", \"Peak30 log10 MIMS\", \"Peak30 Oak steps\",\n                    \"Peak30 Stepcount RF steps\", \"Peak30 Stepcount SSL steps\", \"Peak30 Verisense rev. steps\",\n                    \"Peak30 Verisense steps\",\n                    \"Race/ethnicity\", \"Stroke\",\n                    \"AC\", \"MIMS\", \"Actilife steps\",\n                    \"ADEPT steps\", \"log10 AC\", \"log10 MIMS\", \"Oak steps\",\n                    \"Stepcount RF steps\", \"Stepcount SSL steps\", \"Verisense rev. steps\",\n                    \"Verisense steps\"))\n                    \n\n# paletteer_d(\"ggthemes::colorblind\")\nwt_single %&gt;% \n  filter(!grepl(\"peak\", variable)) %&gt;% \n  mutate(var_group = case_when(\n    grepl(\"steps\", variable) ~ \"Step variable\",\n    grepl(\"total\", variable) ~ \"Non-step accelerometry variable\",\n    TRUE ~ \"Non-accelerometry variable\"\n  ),\n  var_group = factor(var_group, levels = c(\"Step variable\", \"Non-step accelerometry variable\", \"Non-accelerometry variable\"))) %&gt;% \n  group_by(variable, var_group) %&gt;% \n  summarize(mean = mean(concordance),\n            sd = sd(concordance),\n            se = sd(concordance)/sqrt(n())) %&gt;% \n  mutate(ci_low = mean - 1.96*se,\n         ci_high = mean + 1.96*se) %&gt;% \n  ungroup() %&gt;% \n  left_join(var_labels, by = c(\"variable\" = \"names\")) %&gt;%\n  mutate(labels = factor(labels),\n         labels = fct_reorder(labels, mean)) %&gt;% \n  ggplot(aes(y = labels, x = mean, xmin = ci_low, xmax = ci_high, color = var_group))+\n  geom_point(size = 1.3) + \n  # geom_errorbarh(height = .3) + \n  theme_bw() + \n  # scale_color_manual(values = c(\"#CC79A7FF\", \"#009E73FF\", \"#0072B2FF\"), name = \"\")+\n    scale_color_manual(values = c(\"#FF6DB6\", \"#009292\", \"#006DDB\"), name = \"\")+\n  scale_x_continuous(limits=c(0.5, 0.75), breaks=seq(0.5, 0.75, .05))+\n  theme(legend.position = c(.3, .75),\n        legend.title = element_blank(),\n        legend.text = element_text(size = 14),\n        axis.title = element_text(size = 14),\n      axis.text.y = element_text(size = 12),\n      strip.text = element_text(size = 14))+\n  labs(x = \"Mean 100-times repeated 10-fold Cross-Validated Survey-Weighted Concordance\", y = \"\")\n\n\n\n\n\n\n\n\n\nCode\n# ggsave(here::here(\"manuscript\", \"figures\", \"single_concordance.svg\"), width = 8, height = 8)\nggsave(here::here(\"manuscript\", \"figures\", \"single_concordance.png\"), dpi = 400, width = 10, height = 8)"
  },
  {
    "objectID": "vignettes/Analysis.html#comparison-with-cadence-estimates",
    "href": "vignettes/Analysis.html#comparison-with-cadence-estimates",
    "title": "NHANES Mortality Analysis",
    "section": "Comparison with cadence estimates",
    "text": "Comparison with cadence estimates\nSupplement?\n\n\nCode\nwt_single %&gt;% \n  filter(grepl(\"peak\", variable) | grepl(\"steps\", variable)) %&gt;% \n  mutate(var_group = factor(case_when(\n    grepl(\"peak1\", variable) ~ \"Peak 1-min variable\",\n    grepl(\"peak30\", variable) ~ \"Peak 30-min variable\",\n    TRUE ~ \"Mean daily total variable\"\n  ), levels = c(\"Peak 1-min variable\", \"Peak 30-min variable\", \"Mean daily total variable\"))) %&gt;% \n  group_by(variable, var_group) %&gt;% \n  summarize(mean = mean(concordance),\n            sd = sd(concordance),\n            se = sd(concordance)/sqrt(n())) %&gt;% \n  mutate(ci_low = mean - 1.96*se,\n         ci_high = mean + 1.96*se) %&gt;% \n  ungroup() %&gt;% \n  left_join(var_labels, by = c(\"variable\" = \"names\")) %&gt;%\n  mutate(labels = factor(labels),\n         labels = fct_reorder(labels, mean)) %&gt;% \n  ggplot(aes(y = labels, x = mean, xmin = ci_low, xmax = ci_high, color = var_group))+\n  geom_point() + \n  geom_errorbarh() + \n  theme_bw() + \n  # facet_wrap(.~grp) +\n  # scale_color_manual(values = c(\"#E69F00FF\", \"#D55E00FF\", \"#56B4E9FF\"), name = \"\")+\n  scale_color_manual(values = c(\"#FF7F00\", \"#FFBF7F\", \"#19B2FF\"), name = \"\")+\n  scale_x_continuous(limits=c(0.687, 0.738), breaks=seq(0.675, 0.775, .0125))+\n  # scale_x_continuous(limits=c(0.687, 0.738), breaks=seq(0.675, 0.775, .0125))+\n  theme(legend.position = c(.3, .7),\n        legend.title = element_blank(),\n        axis.text.y = element_text(size = 12),\n        axis.title= element_text(size = 14),\n        legend.text = element_text(size = 14),\n        strip.text = element_text(size = 14))+\n  labs(x = \"Mean 100-times repeated 10-fold Cross-Validated Survey-Weighted Concordance\", y = \"\")\n\n\n\n\n\n\n\n\n\nCode\n#   \n# ggsave(here::here(\"manuscript\", \"figures\", \"single_concordance_cadence.png\"), width = 8, height = 8,\n#        dpi = 350)"
  },
  {
    "objectID": "vignettes/Analysis.html#hazard-ratio-forest-plots",
    "href": "vignettes/Analysis.html#hazard-ratio-forest-plots",
    "title": "NHANES Mortality Analysis",
    "section": "Hazard ratio forest plots",
    "text": "Hazard ratio forest plots\nFigure 4?\n\n\nCode\npa_vars = df_mortality_win %&gt;% \n  select(contains(\"total\") & contains(\"steps\")) %&gt;% \n  colnames()\n\ndf_mortality_win_scaled = \n  df_mortality_win %&gt;% \n  mutate(across(c(contains(\"total\")), ~scale(.x)))\n\n\nsds = \n  df_mortality_win %&gt;% \n  summarize(across(c(contains(\"total\")), ~sd(.x)/1000)) %&gt;% \n  pivot_longer(cols = contains(\"total\")) %&gt;% \n  mutate(value = round(value, digits = 1),\n         value = sprintf(\"%.1f\",value)) %&gt;% \n  left_join(var_labels, by = c(\"name\" = \"names\")) \n\nfit_model = function(var, df){\n  \n  df = df %&gt;% \n    mutate(weight = full_sample_2_year_mec_exam_weight / 2, weight_norm = weight / mean(weight))\n  \n\n\n  formula = as.formula(paste0(\"Surv(event_time, mortstat) ~\", var, \"+ \n      age_in_years_at_screening + cat_education + bin_diabetes + cat_bmi +\n      race_hispanic_origin +\n      gender + \n      cat_bmi +\n      cat_education +\n      chf +\n      chd +\n      heartattack +\n      stroke +\n      cancer +\n      bin_diabetes +\n      cat_alcohol +\n      cat_smoke +\n      bin_mobilityproblem +\n      general_health_condition\"))\n    coxph(formula, data = df, weights = weight_norm) %&gt;% \n      tidy() %&gt;% \n      filter(grepl(var, term))\n    \n}\nnames(col_vec) = paste(\"total_\", c(\"acti\", \"adept\", \"oak\", \"scrf\", \"scssl\", \"vsrev\",\n                                  \"vs\"), \"steps\", sep = \"\")\n  \n\nsteps_res = \n  map_dfr(.x = pa_vars,\n          .f = fit_model,\n          df = df_mortality_win) %&gt;% \n  mutate(hr = exp(estimate * 500),\n         ci_low = exp(500*(estimate - (1.96 * std.error))),\n         ci_high = exp(500*(estimate + (1.96 * std.error))))\n\nsteps_res %&gt;% \n  left_join(var_labels, by = c(\"term\" = \"names\")) %&gt;%\n  mutate(labels = factor(labels),\n         labels = fct_reorder(labels, hr, mean, .desc = TRUE),\n         grp = \"Raw\") %&gt;%\n  ggplot(aes(color = term)) +\n  geom_point(aes(y = labels, x = hr), size = 2)+\n  geom_errorbarh(aes(xmin = ci_low, xmax = ci_high, y = labels), linewidth = 1.1,\n                 height = .3)+\n  theme_bw() + \n  scale_color_manual(values = col_vec) + \n  theme(legend.position = \"none\",\n        strip.text = element_text(size = 14),\n        axis.text = element_text(size = 14)) + \n    scale_x_continuous(limits=c(0.725, 1), breaks=seq(0.7, 1, .05))+\n  facet_wrap(.~grp)+\n  geom_vline(aes(xintercept =  1), linetype = \"dashed\") +\n  labs(x = \"Adjusted HR Associated with 500-step Increase in Mean Steps per Day\", y = \"\")\n\n\n\n\n\n\n\n\n\nCode\n# ggsave(here::here(\"manuscript\", \"figures\", \"forest_raw.png\"), width = 8, height = 8, dpi = 400)\n\n\nsteps_res_scaled = \n  map_dfr(.x = c(pa_vars, \"total_PAXMTSM\", \"total_AC\"),\n          .f = fit_model,\n          df = df_mortality_win_scaled) %&gt;% \n  mutate(hr = exp(estimate),\n         ci_low = exp(estimate - (1.96 * std.error)),\n         ci_high = exp(estimate + (1.96 * std.error))) %&gt;% \n  left_join(var_labels, by = c(\"term\" = \"names\"))\n\n\n\nsteps_res_scaled %&gt;% \n  filter(grepl(\"steps\", term)) %&gt;% \n  mutate(term2 = factor(term),\n         term2 = fct_reorder(term2, hr, .desc = TRUE),\n         labels = factor(labels),\n         labels = fct_reorder(labels, hr, .desc = TRUE),\n         grp = \"Scaled\") %&gt;%\n  ggplot(aes(color = term)) +\n  geom_point(aes(y = labels, x = hr), size = 2)+\n  geom_errorbarh(aes(xmin = ci_low, xmax = ci_high, y = labels), linewidth = 1.1)+\n  theme_bw() + \n  facet_wrap(.~grp) + \n   scale_color_manual(values = c(\"#000000FF\", \"#265DABFF\", \"#DF5C24FF\", \"#059748FF\", \"#E5126FFF\", \"#9D722AFF\", \n                                \"#7B3A96FF\", \"#C7B42EFF\", \"#CB2027FF\"),\n                                labels = c(\"Actilife\", \"ADEPT\", \"Oak\", \"Verisense\", \"Verisense rev.\",\n                                           \"Stepcount SSL\", \"Stepcount RF\")) + \n  # scale_color_paletteer_d(\"ggthemes::few_Dark\")+\n  theme(legend.position = \"none\",\n        strip.text = element_text(size = 14)) + \n  scale_x_continuous(limits=c(0.45, 1), breaks=seq(0.35, 1, .05))+\n  geom_vline(aes(xintercept = 1), linetype = \"dashed\")+\n  labs(x = \"Adjusted HR Associated with One SD Increase in Mean Steps per Day\", y = \"\")\n\n\n\n\n\n\n\n\n\nCode\n# ggsave(here::here(\"manuscript\", \"figures\", \"forest_scaled.png\"), width = 8, height = 8, dpi = 400)\n\ntb = steps_res %&gt;% \n  select(term, hr, p.value, ci_low, ci_high) %&gt;% \n  mutate(type = \"raw\") %&gt;% \n  bind_rows(steps_res_scaled %&gt;% select(term, hr, p.value, ci_low, ci_high) %&gt;% mutate(type = \"scaled\")) %&gt;% \n  pivot_wider(names_from = type, values_from = -term) %&gt;% \n  filter(grepl(\"step\", term)) %&gt;% \n  left_join(sds, by = c(\"term\" = \"name\")) %&gt;% \n    arrange(desc(hr_scaled)) %&gt;% \n    mutate(variable_fac = forcats::fct_reorder(term, hr_scaled, mean), \n           ci_raw = paste0(sprintf(\"%0.3f\",round(hr_raw, 3)),\n                       \" (\", sprintf(\"%0.3f\",round(ci_low_raw, 3)), \", \", sprintf(\"%0.3f\",round(ci_high_raw, 3)), \")\"),\n           ci_sc = paste0(sprintf(\"%0.3f\",round(hr_scaled, 3)),\n                       \" (\", sprintf(\"%0.3f\",round(ci_low_scaled, 3)), \", \", sprintf(\"%0.3f\",round(ci_high_scaled, 3)), \")\")) %&gt;%\n    select(variable_fac, ci_raw, ci_sc, value) %&gt;% \n    gt::gt() %&gt;%\n    cols_align(columns = everything(), align = \"left\") %&gt;% \n    as.data.frame() %&gt;% \n    kableExtra::kbl(\"latex\", booktabs = TRUE)\n\n\nsteps_res %&gt;% \n  left_join(var_labels, by = c(\"term\" = \"names\")) %&gt;% \n  mutate(type = \"raw\") %&gt;% \n  bind_rows(steps_res_scaled %&gt;% mutate(type = \"scaled\")) %&gt;%\n  filter(grepl(\"steps\", term)) %&gt;% \n  mutate(term2 = factor(term),\n         term2 = fct_reorder(term2, hr, .desc = TRUE),\n         labels = factor(labels),\n         labels = fct_reorder(labels, hr, .desc = TRUE)) %&gt;% \n  ggplot(aes(color = term, shape = type, linetype = type)) +\n  geom_point(aes(y = labels, x = hr), size = 2)+\n  geom_errorbarh(aes(xmin = ci_low, xmax = ci_high, y = labels), linewidth = 1.1,\n                 height = .4)+\n  theme_bw() + \n  scale_color_manual(values = col_vec)+\n  theme(legend.position = \"none\",\n        axis.text = element_text(size = 12),\n        axis.title = element_text(size = 14)) + \n  scale_x_continuous(limits=c(0.40, 1), breaks=seq(0.35, 1, .05))+\n  geom_vline(aes(xintercept = 1), linetype = \"dashed\")+\n  labs(x = \"Hazard Ratio\", y = \"\")+\n  geom_label(data = sds %&gt;% filter(grepl(\"steps\", name)), aes(x = 0.40, y = labels, label = paste0(\"SD=\", value)), inherit.aes = F, hjust = 0)"
  },
  {
    "objectID": "vignettes/Analysis.html#table-1-demographics",
    "href": "vignettes/Analysis.html#table-1-demographics",
    "title": "NHANES Mortality Analysis",
    "section": "Table 1: Demographics",
    "text": "Table 1: Demographics\n\n\nCode\n# add labels \n\nname_vec = colnames(df_accel)\nlabs = c(\"SEQN\", \"Data release cycle\",\n         \"Interview Examination Status\",\n         \"Sex\", \"Age (yrs)\", \"Age (mos)\", \"Race/ethnicity\",\n         \"Six month time period\",\n         \"Educ. level adults\", \"Marital status\",\n         \"2 yr int weight\", \"2 yr exam weight\", \"Pseudo PSU\",\n         \"Psueudo stratum\", \n         \"Annual HH income\", \n         \"Weight (kg)\", \"Height (cm)\", \"BMI (kg/m2)\", \n         \"Overweight\", \"Diabetes orig.\", \"Diabetes\", \"Arthritis\", \n         \"Coronary Heart Failure\", \"Congenital Heart Disease\", \"Angina\", \n         \"Heart attack\", \"Stroke\", \"Cancer\", colnames(df_all)[29:33],\n         \"Alcohol use\", \"BMI Category\", \"Smoking status\", \"Mobility problem\", \"General health condition\",\n         \"Eligbility\", \"Died by 5 years follow up\", \"COD\", \"COD Diabetes\", \"COD Hypertension\", \n         \"Person-months follow up from interview\", \"Person-months follow up from exam\", \"Eligibility category\", \"COD category\",  \"AC\", \"MIMS\",\n                     \"Actilife steps\", \"ADEPT steps\",\n                    \"log10 AC\", \"log10 MIMS\", \"Oak steps\",\n                     \"Sc. RF steps\", \"Sc. SSL steps\",\n                    \"Verisense rev. steps\", \"Verisense steps\",\n                    \"Peak1 AC\", \"Peak1 MIMS\",\n                     \"Peak1 Actilife steps\", \"Peak1 ADEPT steps\",\n                    \"Peak1 log10 AC\", \"Peak1 log10 MIMS\", \"Peak1 Oak steps\",\n                     \"Peak1 Sc. RF steps\", \"Peak1 Sc. SSL steps\",\n                    \"Peak1 Verisense rev. steps\", \"Peak1 Verisense steps\",\n                     \"Peak30 AC\", \"Peak30 MIMS\",\n                     \"Peak30 Actilife steps\", \"Peak30 ADEPT steps\",\n                    \"Peak30 log10 AC\", \"Peak30 log10 MIMS\", \"Peak30 Oak steps\",\n                     \"Peak30 Sc. RF steps\", \"Peak30 Sc. SSL steps\",\n                    \"Peak30 Verisense rev. steps\", \"Peak30 Verisense steps\", \"No. valid days\", \"Received accelerometer\", \n         \"Valid accelerometry\", \"Inclusion category\", \"Education level\")\n\n\n\nnames(labs) = name_vec\n\ndf_all = \n  df_accel %&gt;% \n  labelled::set_variable_labels(!!!labs)\n# survey weighted table \n# question about this!! \ndf_svy =\n  df_all %&gt;% \n  filter(has_accel) %&gt;% \n  filter(valid_accel) %&gt;% ### do we want to do this? \n  select(\n    gender,\n    age_in_years_at_screening,\n    race_hispanic_origin,\n    cat_education,\n    cat_bmi,\n    bin_diabetes,\n    chf,\n    chd,\n    stroke,\n    cat_alcohol,\n    cat_smoke,\n    bin_mobilityproblem,\n    general_health_condition,\n    mortstat,\n    data_release_cycle,\n    masked_variance_pseudo_psu, masked_variance_pseudo_stratum,\n    full_sample_2_year_mec_exam_weight\n  )  %&gt;%\n  mutate(WTMEC4YR = full_sample_2_year_mec_exam_weight/2,\n         WTMEC4YR_norm = WTMEC4YR/mean(WTMEC4YR, na.rm = TRUE)) %&gt;%\n  select(-full_sample_2_year_mec_exam_weight) %&gt;%\n  svydesign(ids = ~masked_variance_pseudo_psu, weights = ~WTMEC4YR_norm, \n            strata = ~masked_variance_pseudo_stratum, data=., nest=TRUE)\n\ndf_svy %&gt;%\n  tbl_svysummary(\n    by = data_release_cycle,\n    include = -c(masked_variance_pseudo_psu, masked_variance_pseudo_stratum, WTMEC4YR,\n                 WTMEC4YR_norm),\n    statistic = list(\n      all_continuous() ~ \"{mean} ({sd})\",\n      all_categorical() ~ \"{n} ({p}%)\"\n    ),\n    digits = all_continuous() ~ 2,\n    missing_text = \"Missing\",\n  ) %&gt;%\n  add_overall() %&gt;% \n  modify_caption(\"Demographic Characteristics, All Adults\")\n\n\n\n\n\n\nDemographic Characteristics, All Adults\n\n\n\n\n\n\n\n\nCharacteristic\nOverall N = 8,6641\n7 N = 4,3671\n8 N = 4,2971\n\n\n\n\nSex\n\n\n\n\n\n\n\n\n    Female\n4,552 (53%)\n2,281 (52%)\n2,271 (53%)\n\n\n    Male\n4,112 (47%)\n2,086 (48%)\n2,027 (47%)\n\n\nAge (yrs)\n48.01 (17.41)\n47.99 (17.29)\n48.04 (17.53)\n\n\nRace/ethnicity\n\n\n\n\n\n\n\n\n    Non-Hispanic White\n5,785 (67%)\n2,918 (67%)\n2,867 (67%)\n\n\n    Non-Hispanic Black\n979 (11%)\n505 (12%)\n475 (11%)\n\n\n    Other Race - Including Multi-Rac\n640 (7.4%)\n312 (7.2%)\n327 (7.6%)\n\n\n    Mexican American\n736 (8.5%)\n344 (7.9%)\n393 (9.1%)\n\n\n    Other Hispanic\n524 (6.0%)\n288 (6.6%)\n236 (5.5%)\n\n\nEducation level\n\n\n\n\n\n\n\n\n    More than HS\n5,279 (63%)\n2,664 (63%)\n2,615 (63%)\n\n\n    Less than HS\n1,330 (16%)\n703 (17%)\n627 (15%)\n\n\n    HS/HS equivalent\n1,788 (21%)\n877 (21%)\n911 (22%)\n\n\n    Missing\n267\n123\n144\n\n\nBMI Category\n\n\n\n\n\n\n\n\n    Normal\n2,436 (28%)\n1,258 (29%)\n1,178 (28%)\n\n\n    Obese\n3,176 (37%)\n1,538 (36%)\n1,639 (38%)\n\n\n    Overweight\n2,825 (33%)\n1,445 (33%)\n1,380 (32%)\n\n\n    Underweight\n156 (1.8%)\n84 (2.0%)\n71 (1.7%)\n\n\n    Missing\n70\n41\n29\n\n\nDiabetes\n887 (10%)\n430 (9.9%)\n457 (11%)\n\n\n    Missing\n2\n0\n2\n\n\nCoronary Heart Failure\n247 (2.9%)\n135 (3.2%)\n113 (2.7%)\n\n\n    Missing\n270\n127\n143\n\n\nCongenital Heart Disease\n316 (3.8%)\n145 (3.4%)\n171 (4.1%)\n\n\n    Missing\n283\n133\n150\n\n\nStroke\n263 (3.1%)\n140 (3.3%)\n124 (3.0%)\n\n\n    Missing\n267\n124\n143\n\n\nAlcohol use\n\n\n\n\n\n\n\n\n    Never drinker\n1,057 (12%)\n477 (11%)\n581 (14%)\n\n\n    Former drinker\n1,233 (14%)\n619 (14%)\n614 (14%)\n\n\n    Moderate drinker\n2,657 (31%)\n1,401 (32%)\n1,256 (29%)\n\n\n    Heavy drinker\n669 (7.7%)\n374 (8.6%)\n296 (6.9%)\n\n\n    Missing alcohol\n3,048 (35%)\n1,496 (34%)\n1,552 (36%)\n\n\nSmoking status\n\n\n\n\n\n\n\n\n    Never smoker\n4,820 (56%)\n2,351 (55%)\n2,470 (57%)\n\n\n    Former smoker\n2,087 (24%)\n1,071 (25%)\n1,016 (24%)\n\n\n    Current smoker\n1,630 (19%)\n820 (19%)\n810 (19%)\n\n\n    Missing\n127\n126\n1\n\n\nMobility problem\n1,411 (17%)\n638 (15%)\n773 (19%)\n\n\n    Missing\n270\n123\n146\n\n\nGeneral health condition\n\n\n\n\n\n\n\n\n    Poor\n232 (2.7%)\n106 (2.4%)\n126 (2.9%)\n\n\n    Fair\n1,323 (15%)\n612 (14%)\n711 (17%)\n\n\n    Good\n3,408 (39%)\n1,670 (38%)\n1,738 (40%)\n\n\n    Very good\n2,742 (32%)\n1,442 (33%)\n1,300 (30%)\n\n\n    Excellent\n959 (11%)\n536 (12%)\n423 (9.8%)\n\n\nDied by 5 years follow up\n648 (7.5%)\n354 (8.1%)\n294 (6.8%)\n\n\n    Missing\n15\n12\n4\n\n\n\n1 n (%); Mean (SD)\n\n\n\n\n\n\n\n\nCode\ndf_svy =\n  df_all %&gt;%\n  filter(has_accel) %&gt;%\n  filter(valid_accel) %&gt;%\n  mutate(\n    mortstat_fac = factor(\n      mortstat,\n      levels = c(0, 1),\n      labels = c(\"Alive\", \"Deceased\")\n    ),\n    svy_year_fac = factor(\n      data_release_cycle,\n      levels = c(7, 8),\n      labels = c(\"2011-2012\", \"2013-2014\")\n    ),\n    WTMEC4YR = full_sample_2_year_mec_exam_weight / 2,\n    WTMEC4YR_norm = WTMEC4YR / mean(WTMEC4YR)\n  ) %&gt;%\n  svydesign(\n    ids = ~ masked_variance_pseudo_psu,\n    weights = ~ WTMEC4YR_norm,\n    strata = ~ masked_variance_pseudo_stratum,\n    data = .,\n    nest = TRUE\n  )\nvars_table1 = c(\"age_years_interview\",\"gender\",\"race\",\"BMI_cat\",\"education_adult\",\n                 \"overall_health_combined\",\"diabetes\",\"heart_attack\",\"CHF\",\"CHD\",\"stroke\",\"cancer\",\n                 \"mobility_problem\", \"alcohol_consumption_fac\",\"cigarette_smoking\",\"TMIMS_mean\",\"TAT_mean\",\"TMVT_mean\",\"ASTP_mean\",\"RA_MIMS_mean\",\n                 \"mortstat_fac\")\n\nvars_table1 = c( \"gender\",\n   \"age_in_years_at_screening\",\n    \"race_hispanic_origin\",\n    \"cat_education\",\n    \"cat_bmi\",\n    \"bin_diabetes\",\n    \"chf\",\n    \"chd\",\n    \"stroke\",\n    \"cat_alcohol\",\n    \"cat_smoke\",\n    \"bin_mobilityproblem\",\n    \"general_health_condition\",\n    \"mortstat_fac\")\n  \ntable_1 = tableone::svyCreateTableOne(vars=vars_table1, strata=\"svy_year_fac\", test=TRUE, data=df_svy, addOverall = TRUE)"
  },
  {
    "objectID": "vignettes/Analysis.html#table-2-physical-activity",
    "href": "vignettes/Analysis.html#table-2-physical-activity",
    "title": "NHANES Mortality Analysis",
    "section": "Table 2: Physical Activity",
    "text": "Table 2: Physical Activity\nOption 1: by wave and age\n\n\nCode\n# with PA\n\ndf_adult = df_accel %&gt;% \n  filter(age_in_years_at_screening &gt;= 18) %&gt;%\n  mutate(weight = full_sample_2_year_mec_exam_weight / 2,\n         weight_norm = weight / mean(weight)) %&gt;%\n  mutate(group = \"All adults\")\n\ndf_mort = df_accel %&gt;% \n  filter(age_in_years_at_screening &gt;= 50) %&gt;%\n  mutate(weight = full_sample_2_year_mec_exam_weight / 2,\n         weight_norm = weight / mean(weight)) %&gt;%\n  mutate(group = \"50-80y.o\") \n\n\ndf = bind_rows(df_adult, df_mort) \n\n# df = \n#   df %&gt;% \n#     labelled::set_variable_labels(!!!labs)\n\ndf = df %&gt;% \n  rename(Verisense = \"total_vssteps\",\n         \"Verisense rev\" = \"total_vsrevsteps\",\n         Oak = \"total_oaksteps\",\n         ADEPT = \"total_adeptsteps\",\n         SCRF =  \"total_scrfsteps\",\n         SCSSL =  \"total_scsslsteps\",\n         MIMS = \"total_PAXMTSM\",\n         Actilife = \"total_actisteps\",\n         log10MIMS = \"total_log10PAXMTSM\",\n         log10AC = \"total_log10AC\",\n         AC = \"total_AC\") %&gt;% \n  select(!contains(\"peak\"))\n\ndf_analysis_svy = survey::svydesign(\n  id = ~ masked_variance_pseudo_psu,\n  strata = ~ masked_variance_pseudo_stratum,\n  weights = ~ weight_norm,\n  data = df,\n  nest = TRUE\n)\n\n\ndf_analysis_svy %&gt;% \n  tbl_strata(\n    strata = data_release_cycle,\n    .tbl_fun =\n      ~ .x %&gt;%\n      tbl_svysummary(.,\n                     include = c(contains(\"Verisense\"), contains(\"AC\", ignore.case = F),\n                                 contains(\"Oak\"), contains(\"ADEPT\"), contains(\"SCRF\"), contains(\"SCSSL\"), contains(\"MIMS\"), contains(\"actilife\")),\n                     by = group,\n                     statistic = list(\n                       all_continuous() ~ \"{mean} ({sd})\",\n                       all_categorical() ~ \"{n} ({p}%)\"\n                     )),\n    .header = \"**Wave {strata}**, N = {n}\"\n  ) %&gt;% \n  modify_caption(\"Physical Activity Mean Totals Stratified by Age and Wave\")\n\n\n\n\n\n\nPhysical Activity Mean Totals Stratified by Age and Wave\n\n\n\n\n\n\n\n\n\nCharacteristic\n\nWave 7, N = 6513\n\n\nWave 8, N = 6404\n\n\n\n50-80y.o N = 2,1461\nAll adults N = 4,3671\n50-80y.o N = 2,1071\nAll adults N = 4,2971\n\n\n\n\nVerisense rev\n7,532 (4,521)\n9,102 (4,756)\n7,122 (4,402)\n8,725 (4,730)\n\n\nVerisense\n8,337 (4,027)\n9,497 (4,062)\n7,974 (4,019)\n9,163 (4,065)\n\n\nAC\n2,333,927 (791,711)\n2,573,262 (815,192)\n2,291,942 (766,303)\n2,549,846 (816,305)\n\n\nlog10AC\n2,878 (383)\n2,955 (366)\n2,847 (394)\n2,933 (370)\n\n\nOak\n10,254 (5,027)\n11,794 (5,061)\n9,733 (4,886)\n11,381 (5,065)\n\n\nADEPT\n2,342 (1,593)\n2,659 (1,569)\n2,151 (1,680)\n2,453 (1,575)\n\n\nSCRF\n9,888 (5,542)\n11,509 (5,722)\n9,502 (5,442)\n11,263 (5,764)\n\n\nSCSSL\n8,358 (4,402)\n9,144 (4,400)\n8,027 (4,388)\n8,846 (4,399)\n\n\nlog10MIMS\n960 (158)\n998 (154)\n952 (160)\n994 (155)\n\n\nMIMS\n12,435 (3,642)\n13,572 (3,758)\n12,243 (3,574)\n13,467 (3,784)\n\n\nActilife\n11,195 (4,001)\n12,169 (3,995)\n10,850 (4,008)\n11,902 (4,048)\n\n\n\n1 Mean (SD)\n\n\n\n\n\n\n\n\nCode\ndf %&gt;% \n  tbl_strata(\n    strata = data_release_cycle,\n    .tbl_fun =\n      ~ .x %&gt;%\n      tbl_summary(.,\n                     include = c(contains(\"Verisense\"), contains(\"AC\", ignore.case = F),\n                                 contains(\"Oak\"), contains(\"ADEPT\"), contains(\"SCRF\"), contains(\"SCSSL\"), contains(\"MIMS\"), contains(\"actilife\")),\n                     by = group,\n                     statistic = list(\n                       all_continuous() ~ \"{mean} ({sd})\",\n                       all_categorical() ~ \"{n} ({p}%)\"\n                     )),\n    .header = \"**Wave {strata}**, N = {n}\"\n  ) %&gt;% \n  modify_caption(\"Physical Activity Mean Totals Stratified by Age and Wave - Unweighted\")\n\n\n\n\n\n\nPhysical Activity Mean Totals Stratified by Age and Wave - Unweighted\n\n\n\n\n\n\n\n\n\nCharacteristic\n\nWave 7, N = 6410\n\n\nWave 8, N = 6507\n\n\n\n50-80y.o N = 2,1071\nAll adults N = 4,3031\n50-80y.o N = 2,1461\nAll adults N = 4,3611\n\n\n\n\nVerisense rev\n7,165 (4,746)\n8,895 (4,967)\n7,006 (4,582)\n8,740 (4,951)\n\n\nVerisense\n8,074 (4,318)\n9,359 (4,291)\n7,920 (4,216)\n9,204 (4,258)\n\n\nAC\n2,288,434 (832,666)\n2,547,733 (850,056)\n2,286,525 (807,467)\n2,554,633 (851,047)\n\n\nlog10AC\n2,874 (413)\n2,958 (384)\n2,858 (406)\n2,942 (380)\n\n\nOak\n9,791 (5,290)\n11,532 (5,314)\n9,610 (5,125)\n11,393 (5,316)\n\n\nADEPT\n2,152 (1,633)\n2,538 (1,626)\n2,070 (1,626)\n2,426 (1,583)\n\n\nSCRF\n9,381 (5,807)\n11,220 (5,987)\n9,378 (5,720)\n11,264 (6,059)\n\n\nSCSSL\n7,931 (4,639)\n8,893 (4,599)\n7,891 (4,603)\n8,807 (4,610)\n\n\nlog10MIMS\n956 (170)\n997 (162)\n954 (166)\n996 (160)\n\n\nMIMS\n12,238 (3,849)\n13,467 (3,923)\n12,231 (3,757)\n13,497 (3,939)\n\n\nActilife\n10,971 (4,297)\n12,057 (4,216)\n10,841 (4,187)\n11,953 (4,216)\n\n\n\n1 Mean (SD)\n\n\n\n\n\n\n\n\nSupplement: peak values\n\n\nCode\ndf_adult = df_accel %&gt;% \n  mutate(weight = full_sample_2_year_mec_exam_weight / 2,\n         weight_norm = weight / mean(weight)) %&gt;%\n  mutate(group = \"All adults\")\n\ndf_mort = df_mortality %&gt;%\n  mutate(weight = full_sample_2_year_mec_exam_weight / 2,\n         weight_norm = weight / mean(weight)) %&gt;%\n  mutate(group = \"50-79y.o\") \n\n\ndf = bind_rows(df_adult, df_mort) \n\ndf_analysis_svy = survey::svydesign(\n  id = ~ masked_variance_pseudo_psu,\n  strata = ~ masked_variance_pseudo_stratum,\n  weights = ~ weight_norm,\n  data = df,\n  nest = TRUE\n)\ndf_analysis_svy %&gt;% \n  tbl_strata(\n    strata = gender,\n    .tbl_fun =\n      ~ .x %&gt;%\n      tbl_svysummary(.,\n                     include = contains(\"peak1\"),\n                     by = group,\n                     statistic = list(\n                       all_continuous() ~ \"{mean} ({sd})\",\n                       all_categorical() ~ \"{n} ({p}%)\"\n                     )),\n    .header = \"**{strata}**, N = {n}\"\n  ) %&gt;% \n  modify_caption(\"Physical Activity Peak 1 Min Values Stratified by Age and Sex\")\n\n\n\n\n\n\nPhysical Activity Peak 1 Min Values Stratified by Age and Sex\n\n\n\n\n\n\n\n\n\nCharacteristic\n\nFemale, N = 6552\n\n\nMale, N = 5832\n\n\n\n50-79y.o N = 2,0001\nAll adults N = 4,5521\n50-79y.o N = 1,7201\nAll adults N = 4,1121\n\n\n\n\npeak1_AC\n12,348 (2,710)\n13,379 (3,459)\n12,056 (3,418)\n13,383 (3,867)\n\n\npeak1_actisteps\n71 (18)\n74 (18)\n82 (18)\n84 (17)\n\n\npeak1_adeptsteps\n63 (26)\n66 (25)\n68 (23)\n70 (21)\n\n\npeak1_log10AC\n4.08 (0.08)\n4.11 (0.10)\n4.06 (0.11)\n4.10 (0.11)\n\n\npeak1_log10PAXMTSM\n1.73 (0.08)\n1.76 (0.10)\n1.73 (0.10)\n1.77 (0.12)\n\n\npeak1_oaksteps\n95 (18)\n98 (18)\n97 (15)\n100 (14)\n\n\npeak1_PAXMTSM\n54 (11)\n59 (16)\n55 (16)\n62 (20)\n\n\npeak1_scrfsteps\n102 (14)\n104 (14)\n101 (11)\n104 (11)\n\n\npeak1_scsslsteps\n101 (17)\n103 (17)\n101 (15)\n104 (15)\n\n\npeak1_vsrevsteps\n87 (20)\n91 (20)\n91 (18)\n95 (17)\n\n\npeak1_vssteps\n82 (20)\n84 (19)\n86 (17)\n88 (16)\n\n\n\n1 Mean (SD)\n\n\n\n\n\n\n\n\nCode\ndf_analysis_svy %&gt;% \n  tbl_strata(\n    strata = gender,\n    .tbl_fun =\n      ~ .x %&gt;%\n      tbl_svysummary(.,\n                     include = contains(\"peak30\"),\n                     by = group,\n                     statistic = list(\n                       all_continuous() ~ \"{mean} ({sd})\",\n                       all_categorical() ~ \"{n} ({p}%)\"\n                     )),\n    .header = \"**{strata}**, N = {n}\"\n  ) %&gt;% \n  modify_caption(\"Physical Activity Peak 30 Min Values Stratified by Age and Sex\")\n\n\n\n\n\n\nPhysical Activity Peak 30 Min Values Stratified by Age and Sex\n\n\n\n\n\n\n\n\n\nCharacteristic\n\nFemale, N = 6552\n\n\nMale, N = 5832\n\n\n\n50-79y.o N = 2,0001\nAll adults N = 4,5521\n50-79y.o N = 1,7201\nAll adults N = 4,1121\n\n\n\n\npeak30_AC\n8,957 (1,693)\n9,618 (2,216)\n8,424 (2,111)\n9,255 (2,381)\n\n\npeak30_actisteps\n47 (13)\n49 (13)\n56 (16)\n58 (15)\n\n\npeak30_adeptsteps\n31 (19)\n32 (18)\n37 (18)\n38 (17)\n\n\npeak30_log10AC\n3.94 (0.08)\n3.96 (0.10)\n3.91 (0.10)\n3.94 (0.10)\n\n\npeak30_log10PAXMTSM\n1.60 (0.07)\n1.63 (0.09)\n1.58 (0.09)\n1.62 (0.10)\n\n\npeak30_oaksteps\n66 (18)\n69 (18)\n71 (18)\n74 (17)\n\n\npeak30_PAXMTSM\n40 (7)\n43 (10)\n39 (10)\n43 (12)\n\n\npeak30_scrfsteps\n79 (18)\n82 (18)\n82 (16)\n85 (15)\n\n\npeak30_scsslsteps\n76 (20)\n79 (20)\n80 (18)\n84 (18)\n\n\npeak30_vsrevsteps\n58 (19)\n62 (20)\n64 (20)\n68 (19)\n\n\npeak30_vssteps\n53 (17)\n55 (17)\n59 (18)\n61 (16)\n\n\n\n1 Mean (SD)"
  },
  {
    "objectID": "vignettes/Analysis.html#single-variable-mortality-prediction-1",
    "href": "vignettes/Analysis.html#single-variable-mortality-prediction-1",
    "title": "NHANES Mortality Analysis",
    "section": "Single variable mortality prediction",
    "text": "Single variable mortality prediction\nTable 3 or supplement since duplicative of figure\n\n\nCode\nvlabs = c(\n      \"Age (yrs)\",\n      \"Diabetes\",\n      \"Mobility problem\",\n      \"Cancer\",\n      \"Alcohol use\",\n      \"BMI Category\",\n      \"Education category\",\n      \"Smoking status\",\n      \"Congenital Heart Disease\",\n      \"Coronary Heart Failure\",\n      \"Gender\",\n      \"General health condition\",\n      \"Heart attack\",\n      \"Peak1 AC\",\n      \"Peak1 Actilife steps\",\n      \"Peak1 ADEPT steps\",\n      \"Peak1 log10 AC\",\n      \"Peak1 log10 MIMS\",\n      \"Peak1 Oak steps\",\n      \"Peak1 MIMS\",\n      \"Peak1 Stepcount RF steps\",\n      \"Peak1 Stepcount SSL steps\",\n      \"Peak1 Verisense rev. steps\",\n      \"Peak1 Verisense steps\",\n       \"Peak30 AC\",\n      \"Peak30 Actilife steps\",\n      \"Peak30 ADEPT steps\",\n      \"Peak30 log10 AC\",\n      \"Peak30 log10 MIMS\",\n      \"Peak30 Oak steps\",\n      \"Peak30 MIMS\",\n      \"Peak30 Stepcount RF steps\",\n      \"Peak30 Stepcount SSL steps\",\n      \"Peak30 Verisense rev. steps\",\n      \"Peak30 Verisense steps\",\n      \"Race/ethnicity\",\n      \"Stroke\",\n      \"AC\",\n      \"Actilife steps\",\n      \"ADEPT steps\",\n      \"log10 AC\",\n      \"log10 MIMS\",\n      \"Oak steps\",\n      \"MIMS\",\n      \"Stepcount RF steps\",\n      \"Stepcount SSL steps\",\n      \"Verisense rev. steps\",\n      \"Verisense steps\"\n    )\n\n \ndata_summary = wt_single %&gt;% \n  group_by(variable) %&gt;% \n  summarize(across(concordance, list(\n    mean = ~ mean(.x), se = ~ sd(.x) / sqrt(n())\n  ))) %&gt;%\n  mutate(variable_fac = factor(\n    variable,\n    labels = vlabs\n  )) %&gt;% \n  filter(!grepl(\"peak\", variable))\n\ndf_means =\n  df_mortality_win %&gt;%\n  group_by(mortstat) %&gt;%\n  summarize(across(c(contains(\"total\"), contains(\"peak\")), ~ mean(.x))) %&gt;%\n  pivot_longer(cols = -mortstat) %&gt;%\n  pivot_wider(names_from = mortstat,\n              values_from = value,\n              names_prefix = 'died_') %&gt;%\n  rename(variable = name)\n\n# get the best variable based on concodance\nbest_var = data_summary %&gt;%\n  arrange(desc(concordance_mean)) %&gt;%\n  slice(1) %&gt;%\n  pull(variable)\n\nbest_var_vec = wt_single %&gt;%\n  filter(variable == best_var) %&gt;%\n  pull(concordance)\n\nt_tests = wt_single %&gt;%\n  group_by(variable) %&gt;%\n  filter(variable != best_var) %&gt;%\n  nest() %&gt;%\n  mutate(t_test = map(\n    data,\n    ~ t.test(\n      .x$concordance,\n      best_var_vec,\n      var.eq = FALSE,\n      paired = FALSE,\n      alternative = \"less\"\n    )\n  ),\n  res = map(t_test, tidy)) %&gt;%\n  unnest(res) %&gt;%\n  ungroup() %&gt;%\n  select(variable, p.value)\n\n# join t tests with summary data and make table\ndata_summary %&gt;%\n  left_join(t_tests) %&gt;%\n  left_join(df_means) %&gt;%\n  arrange(desc(concordance_mean)) %&gt;%\n  mutate(\n    variable_fac = forcats::fct_reorder(variable_fac, concordance_mean),\n    lb = concordance_mean - 1.96 * concordance_se,\n    ub = concordance_mean + 1.96 * concordance_se,\n    ci = paste0(\n      sprintf(\"%0.3f\", round(concordance_mean, 3)),\n      \" (\",\n      sprintf(\"%0.3f\", round(lb, 3)),\n      \", \",\n      sprintf(\"%0.3f\", round(ub, 3)),\n      \")\"\n    )\n  ) %&gt;%\n  select(variable_fac,\n         ci,\n         p.value,\n         total_alive = died_0,\n         total_deceased = died_1) %&gt;%\n  mutate(pvalue = style_pvalue(p.value, digits = 3)) %&gt;%\n  mutate(pvalue = ifelse(is.na(pvalue), \"---\", pvalue),\n         across(starts_with(\"mean\"), ~ if_else(is.na(.x), \"---\", as.character(round(\n           .x, 0\n         ))))) %&gt;%\n  rename(\n    Variable = variable_fac,\n    \"Mean (95% CI)\" = ci,\n    \"p-value\" = pvalue,\n    \"Mean value among alive\" = total_alive,\n    \"Mean value among deceased\" = total_deceased\n  ) %&gt;%\n  gt::gt() %&gt;%\n  gt::fmt_number(columns = starts_with(\"mean\"), decimals = 0) %&gt;%\n  gt::tab_style(\n    style = list(cell_text(weight = \"bold\")),\n    locations = cells_body(columns = everything(), rows = p.value &gt; 0.05 |\n                             is.na(p.value))\n  ) %&gt;%\n  gt::cols_hide(p.value) %&gt;%\n  tab_header(title = \"100x 10-fold Cross-Validated Single Variable Concordance\", subtitle = \"\") %&gt;%\n  tab_footnote(footnote = \"p-value for one sided t-test comparing variable to variable with higest mean concordance\",\n               locations = cells_column_labels(columns = \"p-value\")) %&gt;%\n  cols_align(columns = everything(), align = \"left\")\n\n\n\n\n\n\n\n\n100x 10-fold Cross-Validated Single Variable Concordance\n\n\nVariable\nMean (95% CI)\nMean value among alive\nMean value among deceased\np-value1\n\n\n\n\nStepcount RF steps\n0.732 (0.731, 0.733)\n10,591\n6,502\n---\n\n\nADEPT steps\n0.725 (0.724, 0.726)\n2,391\n1,380\n&lt;0.001\n\n\nOak steps\n0.723 (0.722, 0.724)\n10,845\n7,067\n&lt;0.001\n\n\nVerisense rev. steps\n0.720 (0.719, 0.721)\n8,021\n4,878\n&lt;0.001\n\n\nVerisense steps\n0.716 (0.715, 0.717)\n8,885\n5,885\n&lt;0.001\n\n\nActilife steps\n0.710 (0.709, 0.711)\n11,790\n8,740\n&lt;0.001\n\n\nStepcount SSL steps\n0.702 (0.701, 0.703)\n8,786\n5,784\n&lt;0.001\n\n\nAC\n0.688 (0.687, 0.689)\n2,454,243\n1,900,197\n&lt;0.001\n\n\nMIMS\n0.682 (0.681, 0.683)\n13,002\n10,438\n&lt;0.001\n\n\nMobility problem\n0.675 (0.675, 0.676)\nNA\nNA\n&lt;0.001\n\n\nAge (yrs)\n0.673 (0.672, 0.674)\nNA\nNA\n&lt;0.001\n\n\nGeneral health condition\n0.662 (0.662, 0.663)\nNA\nNA\n&lt;0.001\n\n\nlog10 MIMS\n0.647 (0.646, 0.648)\n987\n884\n&lt;0.001\n\n\nlog10 AC\n0.630 (0.629, 0.631)\n2,939\n2,708\n&lt;0.001\n\n\nDiabetes\n0.594 (0.593, 0.594)\nNA\nNA\n&lt;0.001\n\n\nSmoking status\n0.589 (0.588, 0.590)\nNA\nNA\n&lt;0.001\n\n\nEducation category\n0.572 (0.571, 0.573)\nNA\nNA\n&lt;0.001\n\n\nAlcohol use\n0.551 (0.549, 0.553)\nNA\nNA\n&lt;0.001\n\n\nCongenital Heart Disease\n0.551 (0.551, 0.552)\nNA\nNA\n&lt;0.001\n\n\nCoronary Heart Failure\n0.549 (0.548, 0.549)\nNA\nNA\n&lt;0.001\n\n\nGender\n0.547 (0.546, 0.547)\nNA\nNA\n&lt;0.001\n\n\nHeart attack\n0.546 (0.545, 0.546)\nNA\nNA\n&lt;0.001\n\n\nCancer\n0.539 (0.538, 0.540)\nNA\nNA\n&lt;0.001\n\n\nStroke\n0.533 (0.532, 0.533)\nNA\nNA\n&lt;0.001\n\n\nBMI Category\n0.524 (0.523, 0.526)\nNA\nNA\n&lt;0.001\n\n\nRace/ethnicity\n0.524 (0.523, 0.525)\nNA\nNA\n&lt;0.001\n\n\n\n1 p-value for one sided t-test comparing variable to variable with higest mean concordance\n\n\n\n\n\n\n\n\nCode\n  tb = data_summary %&gt;%\n    left_join(t_tests) %&gt;%\n    left_join(df_means) %&gt;% \n    arrange(desc(concordance_mean)) %&gt;% \n    mutate(variable_fac = forcats::fct_reorder(variable_fac, concordance_mean), \n          lb = concordance_mean - 1.96 * concordance_se,\n           ub = concordance_mean + 1.96 * concordance_se,\n           ci = paste0(sprintf(\"%0.3f\",round(concordance_mean, 3)),\n                       \" (\", sprintf(\"%0.3f\",round(lb, 3)), \", \", sprintf(\"%0.3f\",round(ub, 3)), \")\")) %&gt;%\n    select(variable_fac, ci, p.value, total_alive = died_0, total_deceased = died_1) %&gt;%\n    mutate(pvalue = style_pvalue(p.value, digits = 3)) %&gt;%\n    mutate(pvalue = ifelse(is.na(pvalue), \"---\", pvalue),\n           across(starts_with(\"mean\"), ~if_else(is.na(.x), \"---\", as.character(round(.x, 0))))) %&gt;% \n    select(-p.value) %&gt;% \n    rename(Variable = variable_fac,\n           \"Mean (95% CI)\" = ci,\n           \"p-value\" = pvalue,\n           \"Mean value among alive\" = total_alive,\n           \"Mean value among deceased\" = total_deceased) %&gt;%\n    gt::gt() %&gt;%\n    gt::fmt_number(columns = starts_with(\"mean\"), decimals = 0) %&gt;% \n    tab_header(title = \"100x 10-fold Cross-Validated Single Variable Concordance\") %&gt;%\n    tab_footnote(\n      footnote = \"p-value for one sided t-test comparing variable to variable with higest mean concordance\",\n      locations = cells_column_labels(columns = \"p-value\")\n    ) %&gt;%\n    cols_align(columns = everything(), align = \"left\") %&gt;% \n    as.data.frame() %&gt;% \n    kableExtra::kbl(\"latex\", booktabs = TRUE)"
  },
  {
    "objectID": "vignettes/Analysis.html#multivariable-mortality-prediction---concordance-and-model-summaries",
    "href": "vignettes/Analysis.html#multivariable-mortality-prediction---concordance-and-model-summaries",
    "title": "NHANES Mortality Analysis",
    "section": "Multivariable mortality prediction - concordance and model summaries",
    "text": "Multivariable mortality prediction - concordance and model summaries\nStill trying to figure out how to present this\n\n\nCode\nwt_small = \n  wt_all %&gt;% \n  filter(model %in% c(\"Demo only\", \"scrfsteps+PAXMTSM\", \"scrfsteps\", \"PAXMTSM\"))\n\nsummary = \n  wt_small %&gt;% \n  group_by(model) %&gt;% \n  summarize(across(concordance, list(mean = ~mean(.x),\n                                       se = ~sd(.x)/sqrt(n())))) %&gt;% \n  mutate(model_fac = factor(model, labels = c(\"Demographics only\",\n                                              \"Demographics + MIMS\", \n                                              \"Demographics + SCRF steps\", \n                                              \"Demographics + SCRF steps + MIMS\")))\n\ncoef_scrf = \n  df_mortality_win %&gt;%  \n  mutate(\n     weight = full_sample_2_year_mec_exam_weight / 2,\n                weight_norm = weight / mean(weight)) %&gt;% \n  coxph(Surv(event_time, mortstat) ~ total_scrfsteps + \n          age_in_years_at_screening + cat_education + bin_diabetes + cat_bmi + \n          race_hispanic_origin + chf + general_health_condition + chd + \n          heartattack + cancer + stroke + cat_alcohol + cat_smoke + \n          bin_mobilityproblem, weights = weight_norm, data  = .) %&gt;% \n  tidy() %&gt;% \n  select(term, estimate, std.error, robust.se, p.value) %&gt;% \n  filter(grepl(\"steps\", term)) %&gt;% \n  mutate(hr = exp(estimate * 500), \n         lb = exp((estimate - 1.96 * std.error) * 500),\n         ub = exp((estimate + 1.96 * std.error) * 500),\n         model = \"scrfsteps\")\n  \ncoef_mims = \n  df_mortality_win %&gt;% \n  mutate(\n     weight = full_sample_2_year_mec_exam_weight / 2,\n                weight_norm = weight / mean(weight)) %&gt;% \n  coxph(Surv(event_time, mortstat) ~ total_PAXMTSM + total_scrfsteps + \n          age_in_years_at_screening + cat_education + bin_diabetes + cat_bmi + \n          race_hispanic_origin + chf + general_health_condition + chd + \n          heartattack + cancer + stroke + cat_alcohol + cat_smoke + \n          bin_mobilityproblem, weights = weight_norm, data  = .) %&gt;% \n  tidy() %&gt;% \n  select(term, estimate, std.error, robust.se, p.value) %&gt;% \n  filter(grepl(\"steps\", term)) %&gt;% \n  mutate(hr = exp(estimate * 500), \n         lb = exp((estimate - 1.96 * std.error) * 500),\n         ub = exp((estimate + 1.96 * std.error) * 500),\n         model = \"scrfsteps+PAXMTSM\")\n  \ncoefs = bind_rows(coef_scrf, coef_mims)\nsummary %&gt;% \n  left_join(coefs)  %&gt;% \n  mutate(conc_lb = concordance_mean - 1.96 * concordance_se,\n         conc_ub = concordance_mean + 1.96 * concordance_se,\n         conc_ci = paste0(sprintf(\"%0.3f\",round(concordance_mean, 3)),\n                       \" (\", sprintf(\"%0.3f\",round(conc_lb, 3)), \", \", sprintf(\"%0.3f\",round(conc_ub, 3)), \")\"),\n         hr_ci = case_when(!is.na(hr) ~ paste0(sprintf(\"%0.3f\",round(hr, 3)),\n                       \" (\", sprintf(\"%0.3f\",round(lb, 3)), \", \", sprintf(\"%0.3f\",round(ub, 3)), \")\"),\n                       TRUE ~ \"---\"),\n         p.value = format.pval(p.value, digits = 3)) %&gt;% \n  select(model_fac, hr_ci,p.value, conc_ci) %&gt;% \n  rename(Model = model_fac,\n         \"Steps HR\" = hr_ci,\n         \"Steps p-value\" = p.value,\n         \"Model concordance\" = conc_ci) %&gt;% \n  gt::gt() %&gt;%\n    # gt::fmt_number(columns = starts_with(\"mean\"), decimals = 0) %&gt;% \n    tab_header(title = \"Multivariable Model Comparison\") %&gt;%\n    cols_align(columns = everything(), align = \"left\")\n\n\n\n\n\n\n\n\nMultivariable Model Comparison\n\n\nModel\nSteps HR\nSteps p-value\nModel concordance\n\n\n\n\nDemographics only\n---\nNA\n0.769 (0.769, 0.770)\n\n\nDemographics + MIMS\n---\nNA\n0.773 (0.772, 0.774)\n\n\nDemographics + SCRF steps\n0.955 (0.940, 0.970)\n5.85e-05\n0.776 (0.775, 0.777)\n\n\nDemographics + SCRF steps + MIMS\n0.961 (0.939, 0.983)\n0.0361\n0.774 (0.773, 0.775)\n\n\n\n\n\n\n\nCode\ntb = \n  summary %&gt;% \n  left_join(coefs)  %&gt;% \n  mutate(conc_lb = concordance_mean - 1.96 * concordance_se,\n         conc_ub = concordance_mean + 1.96 * concordance_se,\n         conc_ci = paste0(sprintf(\"%0.3f\",round(concordance_mean, 3)),\n                       \" (\", sprintf(\"%0.3f\",round(conc_lb, 3)), \", \", sprintf(\"%0.3f\",round(conc_ub, 3)), \")\"),\n         hr_ci = case_when(!is.na(hr) ~ paste0(sprintf(\"%0.3f\",round(hr, 3)),\n                       \" (\", sprintf(\"%0.3f\",round(lb, 3)), \", \", sprintf(\"%0.3f\",round(ub, 3)), \")\"),\n                       TRUE ~ \"---\"),\n         p.value = format.pval(p.value, digits = 3)) %&gt;% \n  select(model_fac, hr_ci,p.value, conc_ci) %&gt;% \n  rename(Model = model_fac,\n         \"Steps HR\" = hr_ci,\n         \"Steps p-value\" = p.value,\n         \"Model concordance\" = conc_ci) %&gt;% \n  gt::gt() %&gt;%\n    # gt::fmt_number(columns = starts_with(\"mean\"), decimals = 0) %&gt;% \n    tab_header(title = \"Multivariable Model Comparison\",\n               subtitle = \"Male\") %&gt;%\n    cols_align(columns = everything(), align = \"left\") %&gt;% \n  data.frame() %&gt;%\n  kableExtra::kbl(format = \"latex\")\n\n\n\n\nCode\nmodel_steps_vs = \n  df_mortality_win %&gt;% \n  filter(gender == \"Male\") %&gt;% \n  mutate(\n     weight = full_sample_2_year_mec_exam_weight / 2,\n                weight_norm = weight / mean(weight)) %&gt;% \n  coxph(Surv(event_time, mortstat) ~ total_vsrevsteps + \n          age_in_years_at_screening + cat_education + bin_diabetes + cat_bmi + \n          race_hispanic_origin + chf + general_health_condition + chd + \n          heartattack + cancer + stroke + cat_alcohol + cat_smoke + \n          bin_mobilityproblem, weights = weight_norm, data  = .)\n\nmodel_steps_vs %&gt;% \n  tidy() %&gt;% \n  select(term, estimate, robust.se, p.value) %&gt;% \n  arrange(p.value) %&gt;% \n  mutate(sig = case_when(\n           p.value &lt; 0.001 ~ \"***\",\n           p.value &lt; 0.01 ~ \"**\", \n           p.value &lt; 0.05 ~ \"*\",\n           p.value &lt; 0.1 ~ \".\",\n           TRUE ~ \"\"),\n         p.value = style_pvalue(p.value, digits = 2)) %&gt;% \n  \n  gt() %&gt;% \n  tab_style(\n    style = list(\n      cell_fill(color = \"lightcyan\"),\n      cell_text(weight = \"bold\")\n      ),\n    locations = cells_body(\n      columns = everything(),\n      rows = grepl(\"mean\", term)\n    )\n  ) %&gt;% \n  fmt_number(columns = c(estimate, robust.se), n_sigfig = 2) \n\nmodel_steps_mims = \n  df_mortality_win %&gt;% \n  filter(gender == \"Male\") %&gt;% \n  mutate(\n     weight = full_sample_2_year_mec_exam_weight / 2,\n                weight_norm = weight / mean(weight)) %&gt;% \n  coxph(Surv(event_time, mortstat) ~ total_PAXMTSM + \n          age_in_years_at_screening + cat_education + bin_diabetes + cat_bmi + \n          race_hispanic_origin + chf + general_health_condition + chd + \n          heartattack + cancer + stroke + cat_alcohol + cat_smoke + \n          bin_mobilityproblem, weights = weight_norm, data  = .) \n\nmodel_steps_mims %&gt;% \n  tidy() %&gt;% \n  select(term, estimate, robust.se, p.value) %&gt;% \n  arrange(p.value) %&gt;% \n  mutate(sig = case_when(\n           p.value &lt; 0.001 ~ \"***\",\n           p.value &lt; 0.01 ~ \"**\", \n           p.value &lt; 0.05 ~ \"*\",\n           p.value &lt; 0.1 ~ \".\",\n           TRUE ~ \"\"),\n         p.value = style_pvalue(p.value, digits = 2)) %&gt;% \n  gt() %&gt;% \n  tab_style(\n    style = list(\n      cell_fill(color = \"lightcyan\"),\n      cell_text(weight = \"bold\")\n      ),\n    locations = cells_body(\n      columns = everything(),\n      rows = grepl(\"mean\", term)\n    )\n  ) %&gt;% \n  fmt_number(columns = c(estimate, robust.se), n_sigfig = 2) \n\nmodel_steps_vs_mims = \n  df_mortality_win %&gt;% \n  filter(gender == \"Male\") %&gt;% \n  mutate(\n     weight = full_sample_2_year_mec_exam_weight / 2,\n                weight_norm = weight / mean(weight)) %&gt;% \n  coxph(Surv(event_time, mortstat) ~ total_vsrevsteps + total_PAXMTSM + \n          age_in_years_at_screening + cat_education + bin_diabetes + cat_bmi + \n          race_hispanic_origin + chf + general_health_condition + chd + \n          heartattack + cancer + stroke + cat_alcohol + cat_smoke + \n          bin_mobilityproblem, weights = weight_norm, data  = .) \n\nmodel_steps_vs_mims %&gt;% \n  tidy() %&gt;% \n  select(term, estimate, robust.se, p.value) %&gt;% \n  arrange(p.value) %&gt;% \n  mutate(sig = case_when(\n           p.value &lt; 0.001 ~ \"***\",\n           p.value &lt; 0.01 ~ \"**\", \n           p.value &lt; 0.05 ~ \"*\",\n           p.value &lt; 0.1 ~ \".\",\n           TRUE ~ \"\"),\n         p.value = style_pvalue(p.value, digits = 2)) %&gt;% \n  gt() %&gt;% \n  tab_style(\n    style = list(\n      cell_fill(color = \"lightcyan\"),\n      cell_text(weight = \"bold\")\n      ),\n    locations = cells_body(\n      columns = everything(),\n      rows = grepl(\"mean\", term)\n    )\n  ) %&gt;% \n  fmt_number(columns = c(estimate, robust.se), n_sigfig = 2) \n\nmodel_steps_vs_ac = \n  df_mortality_win %&gt;% \n  filter(gender == \"Male\") %&gt;% \n  mutate(\n     weight = full_sample_2_year_mec_exam_weight / 2,\n                weight_norm = weight / mean(weight)) %&gt;% \n  coxph(Surv(event_time, mortstat) ~ total_vsrevsteps + total_AC + \n          age_in_years_at_screening + cat_education + bin_diabetes + cat_bmi + \n          race_hispanic_origin + chf + general_health_condition + chd + \n          heartattack + cancer + stroke + cat_alcohol + cat_smoke + \n          bin_mobilityproblem, weights = weight_norm, data  = .) \n\nmodel_steps_vs_ac %&gt;% \n  tidy() %&gt;% \n  select(term, estimate, robust.se, p.value) %&gt;% \n  arrange(p.value) %&gt;% \n  mutate(sig = case_when(\n           p.value &lt; 0.001 ~ \"***\",\n           p.value &lt; 0.01 ~ \"**\", \n           p.value &lt; 0.05 ~ \"*\",\n           p.value &lt; 0.1 ~ \".\",\n           TRUE ~ \"\"),\n         p.value = style_pvalue(p.value, digits = 2)) %&gt;% \n  gt() %&gt;% \n  tab_style(\n    style = list(\n      cell_fill(color = \"lightcyan\"),\n      cell_text(weight = \"bold\")\n      ),\n    locations = cells_body(\n      columns = everything(),\n      rows = grepl(\"mean\", term)\n    )\n  ) %&gt;% \n  fmt_number(columns = c(estimate, robust.se), n_sigfig = 2) \n\n\n\n\nCode\nmodel_steps_sc = \n  df_mortality_win %&gt;% \n  filter(gender == \"Female\") %&gt;% \n  mutate(\n     weight = full_sample_2_year_mec_exam_weight / 2,\n                weight_norm = weight / mean(weight)) %&gt;% \n  coxph(Surv(event_time, mortstat) ~ total_scrfsteps + \n          age_in_years_at_screening + cat_education + bin_diabetes + cat_bmi + \n          race_hispanic_origin + chf + general_health_condition + chd + \n          heartattack + cancer + stroke + cat_alcohol + cat_smoke + \n          bin_mobilityproblem, weights = weight_norm, data  = .)\n\nmodel_steps_sc %&gt;% \n  tidy() %&gt;% \n  select(term, estimate, robust.se, p.value) %&gt;% \n  arrange(p.value) %&gt;% \n  mutate(sig = case_when(\n           p.value &lt; 0.001 ~ \"***\",\n           p.value &lt; 0.01 ~ \"**\", \n           p.value &lt; 0.05 ~ \"*\",\n           p.value &lt; 0.1 ~ \".\",\n           TRUE ~ \"\"),\n         p.value = style_pvalue(p.value, digits = 2)) %&gt;% \n  \n  gt() %&gt;% \n  tab_style(\n    style = list(\n      cell_fill(color = \"lightcyan\"),\n      cell_text(weight = \"bold\")\n      ),\n    locations = cells_body(\n      columns = everything(),\n      rows = grepl(\"mean\", term)\n    )\n  ) %&gt;% \n  fmt_number(columns = c(estimate, robust.se), n_sigfig = 2) \n\nmodel_steps_mims = \n  df_mortality_win %&gt;% \n  filter(gender == \"Female\") %&gt;% \n  mutate(\n     weight = full_sample_2_year_mec_exam_weight / 2,\n                weight_norm = weight / mean(weight)) %&gt;% \n  coxph(Surv(event_time, mortstat) ~ total_PAXMTSM + \n          age_in_years_at_screening + cat_education + bin_diabetes + cat_bmi + \n          race_hispanic_origin + chf + general_health_condition + chd + \n          heartattack + cancer + stroke + cat_alcohol + cat_smoke + \n          bin_mobilityproblem, weights = weight_norm, data  = .) \n\nmodel_steps_mims %&gt;% \n  tidy() %&gt;% \n  select(term, estimate, robust.se, p.value) %&gt;% \n  arrange(p.value) %&gt;% \n  mutate(sig = case_when(\n           p.value &lt; 0.001 ~ \"***\",\n           p.value &lt; 0.01 ~ \"**\", \n           p.value &lt; 0.05 ~ \"*\",\n           p.value &lt; 0.1 ~ \".\",\n           TRUE ~ \"\"),\n         p.value = style_pvalue(p.value, digits = 2)) %&gt;% \n  gt() %&gt;% \n  tab_style(\n    style = list(\n      cell_fill(color = \"lightcyan\"),\n      cell_text(weight = \"bold\")\n      ),\n    locations = cells_body(\n      columns = everything(),\n      rows = grepl(\"mean\", term)\n    )\n  ) %&gt;% \n  fmt_number(columns = c(estimate, robust.se), n_sigfig = 2) \n\nmodel_steps_sc_mims = \n  df_mortality_win %&gt;% \n  filter(gender == \"Female\") %&gt;% \n  mutate(\n     weight = full_sample_2_year_mec_exam_weight / 2,\n                weight_norm = weight / mean(weight)) %&gt;% \n  coxph(Surv(event_time, mortstat) ~ total_scrfsteps + total_PAXMTSM + \n          age_in_years_at_screening + cat_education + bin_diabetes + cat_bmi + \n          race_hispanic_origin + chf + general_health_condition + chd + \n          heartattack + cancer + stroke + cat_alcohol + cat_smoke + \n          bin_mobilityproblem, weights = weight_norm, data  = .) \n\nmodel_steps_sc_mims %&gt;% \n  tidy() %&gt;% \n  select(term, estimate, robust.se, p.value) %&gt;% \n  arrange(p.value) %&gt;% \n  mutate(sig = case_when(\n           p.value &lt; 0.001 ~ \"***\",\n           p.value &lt; 0.01 ~ \"**\", \n           p.value &lt; 0.05 ~ \"*\",\n           p.value &lt; 0.1 ~ \".\",\n           TRUE ~ \"\"),\n         p.value = style_pvalue(p.value, digits = 2)) %&gt;% \n  gt() %&gt;% \n  tab_style(\n    style = list(\n      cell_fill(color = \"lightcyan\"),\n      cell_text(weight = \"bold\")\n      ),\n    locations = cells_body(\n      columns = everything(),\n      rows = grepl(\"mean\", term)\n    )\n  ) %&gt;% \n  fmt_number(columns = c(estimate, robust.se), n_sigfig = 2) \n\nmodel_steps_sc_ac = \n  df_mortality_win %&gt;% \n  filter(gender == \"Female\") %&gt;% \n  mutate(\n     weight = full_sample_2_year_mec_exam_weight / 2,\n                weight_norm = weight / mean(weight)) %&gt;% \n  coxph(Surv(event_time, mortstat) ~ total_scrfsteps + total_AC + \n          age_in_years_at_screening + cat_education + bin_diabetes + cat_bmi + \n          race_hispanic_origin + chf + general_health_condition + chd + \n          heartattack + cancer + stroke + cat_alcohol + cat_smoke + \n          bin_mobilityproblem, weights = weight_norm, data  = .) \n\nmodel_steps_sc_ac %&gt;% \n  tidy() %&gt;% \n  select(term, estimate, robust.se, p.value) %&gt;% \n  arrange(p.value) %&gt;% \n  mutate(sig = case_when(\n           p.value &lt; 0.001 ~ \"***\",\n           p.value &lt; 0.01 ~ \"**\", \n           p.value &lt; 0.05 ~ \"*\",\n           p.value &lt; 0.1 ~ \".\",\n           TRUE ~ \"\"),\n         p.value = style_pvalue(p.value, digits = 2)) %&gt;% \n  gt() %&gt;% \n  tab_style(\n    style = list(\n      cell_fill(color = \"lightcyan\"),\n      cell_text(weight = \"bold\")\n      ),\n    locations = cells_body(\n      columns = everything(),\n      rows = grepl(\"mean\", term)\n    )\n  ) %&gt;% \n  fmt_number(columns = c(estimate, robust.se), n_sigfig = 2)"
  },
  {
    "objectID": "vignettes/Analysis.html#with-step-cadence",
    "href": "vignettes/Analysis.html#with-step-cadence",
    "title": "NHANES Mortality Analysis",
    "section": "With step cadence",
    "text": "With step cadence\n\n\nCode\nwt_female_cad = readRDS(here::here(\"results\", \"metrics_wtd_100_female_cadence.rds\"))\n\n\nwt_female_small = \n  wt_female_cad %&gt;% \n  filter(model %in% c(\"scrfsteps\", \"scrfsteps+peak1_scrfsteps\",\n                      \"peak1_scrfsteps\"))\n\nsummary = \n  wt_female_small %&gt;% \n  group_by(model) %&gt;% \n  summarize(across(concordance, list(mean = ~mean(.x),\n                                       se = ~sd(.x)/sqrt(n())))) %&gt;% \n  mutate(model_fac = factor(model, labels = c(\"Demographics + Peak1 Cadence\", \n                                                \"Demographics + Total Steps\", \n                                                \"Demographics + Steps + Peak1 Cadence\")))\n\ncoef_steps = \n  df_mortality_win %&gt;% \n  filter(gender == \"Female\") %&gt;% \n  mutate(\n     weight = full_sample_2_year_mec_exam_weight / 2,\n                weight_norm = weight / mean(weight)) %&gt;% \n  coxph(Surv(event_time, mortstat) ~ total_scrfsteps + \n          age_in_years_at_screening + cat_education + bin_diabetes + cat_bmi + \n          race_hispanic_origin + chf + general_health_condition + chd + \n          heartattack + cancer + stroke + cat_alcohol + cat_smoke + \n          bin_mobilityproblem, weights = weight_norm, data  = .) %&gt;% \n  tidy() %&gt;% \n  select(term, estimate, std.error, robust.se, p.value) %&gt;% \n  filter(grepl(\"steps\", term)) %&gt;% \n  mutate(hr = exp(estimate * 500), \n         lb = exp((estimate - 1.96 * std.error) * 500),\n         ub = exp((estimate + 1.96 * std.error) * 500),\n         step_ci = paste0(sprintf(\"%0.3f\",round(hr, 3)),\n                       \" (\", sprintf(\"%0.3f\",round(lb, 3)), \", \", sprintf(\"%0.3f\",round(ub, 3)), \")\"), model = \"scrfsteps\") %&gt;% \n  rename(step_p = p.value) %&gt;% \n  select(model, step_ci, step_p)\n\n  \ncoef_cad = \n  df_mortality_win %&gt;% \n  filter(gender == \"Female\") %&gt;% \n  mutate(\n     weight = full_sample_2_year_mec_exam_weight / 2,\n                weight_norm = weight / mean(weight)) %&gt;% \n  coxph(Surv(event_time, mortstat) ~ total_scrfsteps + \n          age_in_years_at_screening + cat_education + bin_diabetes + cat_bmi + \n          race_hispanic_origin + chf + general_health_condition + chd + \n          heartattack + cancer + stroke + cat_alcohol + cat_smoke + \n          bin_mobilityproblem, weights = weight_norm, data  = .) %&gt;% \n  tidy() %&gt;% \n  select(term, estimate, std.error, robust.se, p.value) %&gt;% \n  filter(grepl(\"steps\", term)) %&gt;% \n  mutate(hr = exp(estimate *10), \n         lb = exp((estimate - 1.96 * std.error)*10 ),\n         ub = exp((estimate + 1.96 * std.error)*10),\n         cad_ci = paste0(sprintf(\"%0.3f\",round(hr, 3)),\n                       \" (\", sprintf(\"%0.3f\",round(lb, 3)), \", \", sprintf(\"%0.3f\",round(ub, 3)), \")\"), model = \"peak1_scrfsteps\") %&gt;% \n  rename(cad_p = p.value) %&gt;% \n  select(model, cad_ci, cad_p)\n\n\ncoef_both = \n  df_mortality_win %&gt;% \n  filter(gender == \"Female\") %&gt;% \n  mutate(\n     weight = full_sample_2_year_mec_exam_weight / 2,\n                weight_norm = weight / mean(weight)) %&gt;% \n  coxph(Surv(event_time, mortstat) ~ peak1_scrfsteps + total_scrfsteps +\n          age_in_years_at_screening + cat_education + bin_diabetes + cat_bmi + \n          race_hispanic_origin + chf + general_health_condition + chd + \n          heartattack + cancer + stroke + cat_alcohol + cat_smoke + \n          bin_mobilityproblem, weights = weight_norm, data  = .) %&gt;% \n  tidy() %&gt;% \n  select(term, estimate, std.error, robust.se, p.value) %&gt;% \n  filter(grepl(\"steps\", term))\n  \ncoef_cad_steps = \n  coef_both %&gt;% \n  filter(grepl(\"peak\", term)) %&gt;% \n  mutate(hr = exp(estimate*10), \n         lb = exp((estimate - 1.96 * std.error)*10 ),\n         ub = exp((estimate + 1.96 * std.error)*10),\n         cad_ci = paste0(sprintf(\"%0.3f\",round(hr, 3)),\n                       \" (\", sprintf(\"%0.3f\",round(lb, 3)), \", \", sprintf(\"%0.3f\",round(ub, 3)), \")\"), model = \"scrfsteps+peak1_scrfsteps\") %&gt;% \n  rename(cad_p = p.value)\n\ncoef_cad_steps2 = \n  coef_both %&gt;% \n  filter(!grepl(\"peak\", term)) %&gt;% \n  mutate(hr = exp(estimate *500), \n         lb = exp((estimate - 1.96 * std.error) *500),\n         ub = exp((estimate + 1.96 * std.error)*500 ),\n         step_ci = paste0(sprintf(\"%0.3f\",round(hr, 3)),\n                       \" (\", sprintf(\"%0.3f\",round(lb, 3)), \", \", sprintf(\"%0.3f\",round(ub, 3)), \")\"), model = \"scrfsteps+peak1_scrfsteps\") %&gt;% \n  rename(step_p = p.value)\n\ncoef2 = coef_cad_steps %&gt;% \n  left_join(coef_cad_steps2, by = \"model\") %&gt;% \n  select(model, cad_ci, cad_p, step_ci, step_p) %&gt;% \n  bind_rows(coef_steps) %&gt;% \n  bind_rows(coef_cad)\n\n\nsummary %&gt;% \n  left_join(coef2)  %&gt;% \n  mutate(conc_lb = concordance_mean - 1.96 * concordance_se,\n         conc_ub = concordance_mean + 1.96 * concordance_se,\n         conc_ci = paste0(sprintf(\"%0.3f\",round(concordance_mean, 3)),\n                       \" (\", sprintf(\"%0.3f\",round(conc_lb, 3)), \", \", sprintf(\"%0.3f\",round(conc_ub, 3)), \")\"),\n         across(contains(\"_p\"), ~format.pval(.x, digits = 3))) %&gt;% \n  select(model_fac, step_ci, step_p, cad_ci, cad_p, conc_ci)   %&gt;% \n  rename(Model = model_fac,\n         \"Steps HR\" = step_ci,\n         \"Steps p-value\" = step_p,\n         \"Cadence HR\" = cad_ci,\n         \"Cadence p-value\" = cad_p,\n         \"Model concordance\" = conc_ci) %&gt;% \n  gt::gt() %&gt;%\n    # gt::fmt_number(columns = starts_with(\"mean\"), decimals = 0) %&gt;% \n    tab_header(title = \"Comparison of Addition of Cadence Variables\",\n               subtitle = \"Female\") %&gt;%\n    cols_align(columns = everything(), align = \"left\")\n\n\n\n\nCode\nwt_male_cad = readRDS(here::here(\"results\", \"metrics_wtd_100_male_cadence.rds\"))\nmake_multivar_tab(wt_male_cad, subt = \"Male\")\n\nmodel_steps_sc_cad = \n  df_mortality_win %&gt;% \n  filter(gender == \"Male\") %&gt;% \n  mutate(\n     weight = full_sample_2_year_mec_exam_weight / 2,\n                weight_norm = weight / mean(weight)) %&gt;% \n  coxph(Surv(event_time, mortstat) ~ total_vsrevsteps + peak1_vsrevsteps + \n          age_in_years_at_screening + cat_education + bin_diabetes + cat_bmi + \n          race_hispanic_origin + chf + general_health_condition + chd + \n          heartattack + cancer + stroke + cat_alcohol + cat_smoke + \n          bin_mobilityproblem, weights = weight_norm, data  = .) \n\nmodel_steps_sc_cad %&gt;% \n  tidy() %&gt;% \n  select(term, estimate, robust.se, p.value) %&gt;% \n  arrange(p.value) %&gt;% \n  mutate(sig = case_when(\n           p.value &lt; 0.001 ~ \"***\",\n           p.value &lt; 0.01 ~ \"**\", \n           p.value &lt; 0.05 ~ \"*\",\n           p.value &lt; 0.1 ~ \".\",\n           TRUE ~ \"\"),\n         p.value = style_pvalue(p.value, digits = 2)) %&gt;% \n  gt() %&gt;% \n  tab_style(\n    style = list(\n      cell_fill(color = \"lightcyan\"),\n      cell_text(weight = \"bold\")\n      ),\n    locations = cells_body(\n      columns = everything(),\n      rows = grepl(\"revised\", term)\n    )\n  ) %&gt;% \n  fmt_number(columns = c(estimate, robust.se), n_sigfig = 2) \n\nmodel_steps_sc_cad = \n  df_mortality_win %&gt;% \n  filter(gender == \"Male\") %&gt;% \n  mutate(\n     weight = full_sample_2_year_mec_exam_weight / 2,\n                weight_norm = weight / mean(weight)) %&gt;% \n  coxph(Surv(event_time, mortstat) ~ total_vsrevsteps + peak30_vsrevsteps +\n          age_in_years_at_screening + cat_education + bin_diabetes + cat_bmi + \n          race_hispanic_origin + chf + general_health_condition + chd + \n          heartattack + cancer + stroke + cat_alcohol + cat_smoke + \n          bin_mobilityproblem, weights = weight_norm, data  = .) \n\n\nmodel_steps_sc_cad %&gt;% \n  tidy() %&gt;% \n  select(term, estimate, robust.se, p.value) %&gt;% \n  arrange(p.value) %&gt;% \n  mutate(sig = case_when(\n           p.value &lt; 0.001 ~ \"***\",\n           p.value &lt; 0.01 ~ \"**\", \n           p.value &lt; 0.05 ~ \"*\",\n           p.value &lt; 0.1 ~ \".\",\n           TRUE ~ \"\"),\n         p.value = style_pvalue(p.value, digits = 2)) %&gt;% \n  gt() %&gt;% \n  tab_style(\n    style = list(\n      cell_fill(color = \"lightcyan\"),\n      cell_text(weight = \"bold\")\n      ),\n    locations = cells_body(\n      columns = everything(),\n      rows = grepl(\"revised\", term)\n    )\n  ) %&gt;% \n  fmt_number(columns = c(estimate, robust.se), n_sigfig = 2) \n\n\n\n\nCode\nwt_female_cad = readRDS(here::here(\"results\", \"metrics_wtd_100_female_cadence.rds\"))\nmake_multivar_tab(wt_female_cad, subt = \"Female\")\n\nmodel_steps_sc_cad = \n  df_mortality_win %&gt;% \n  filter(gender == \"Female\") %&gt;% \n  mutate(\n     weight = full_sample_2_year_mec_exam_weight / 2,\n                weight_norm = weight / mean(weight)) %&gt;% \n  coxph(Surv(event_time, mortstat) ~ total_scrfsteps + peak1_scrfsteps + \n          age_in_years_at_screening + cat_education + bin_diabetes + cat_bmi + \n          race_hispanic_origin + chf + general_health_condition + chd + \n          heartattack + cancer + stroke + cat_alcohol + cat_smoke + \n          bin_mobilityproblem, weights = weight_norm, data  = .) \n\nmodel_steps_sc_cad %&gt;% \n  tidy() %&gt;% \n  select(term, estimate, robust.se, p.value) %&gt;% \n  arrange(p.value) %&gt;% \n  mutate(sig = case_when(\n           p.value &lt; 0.001 ~ \"***\",\n           p.value &lt; 0.01 ~ \"**\", \n           p.value &lt; 0.05 ~ \"*\",\n           p.value &lt; 0.1 ~ \".\",\n           TRUE ~ \"\"),\n         p.value = style_pvalue(p.value, digits = 2)) %&gt;% \n  gt() %&gt;% \n  tab_style(\n    style = list(\n      cell_fill(color = \"lightcyan\"),\n      cell_text(weight = \"bold\")\n      ),\n    locations = cells_body(\n      columns = everything(),\n      rows = grepl(\"scrf\", term)\n    )\n  ) %&gt;% \n  fmt_number(columns = c(estimate, robust.se), n_sigfig = 2) \n\nmodel_steps_sc_cad = \n  df_mortality_win %&gt;% \n  filter(gender == \"Female\") %&gt;% \n  mutate(\n     weight = full_sample_2_year_mec_exam_weight / 2,\n                weight_norm = weight / mean(weight)) %&gt;% \n  coxph(Surv(event_time, mortstat) ~ total_scrfsteps + peak30_scrfsteps + \n          age_in_years_at_screening + cat_education + bin_diabetes + cat_bmi + \n          race_hispanic_origin + chf + general_health_condition + chd + \n          heartattack + cancer + stroke + cat_alcohol + cat_smoke + \n          bin_mobilityproblem, weights = weight_norm, data  = .) \n\n\nmodel_steps_sc_cad %&gt;% \n  tidy() %&gt;% \n  select(term, estimate, robust.se, p.value) %&gt;% \n  arrange(p.value) %&gt;% \n  mutate(sig = case_when(\n           p.value &lt; 0.001 ~ \"***\",\n           p.value &lt; 0.01 ~ \"**\", \n           p.value &lt; 0.05 ~ \"*\",\n           p.value &lt; 0.1 ~ \".\",\n           TRUE ~ \"\"),\n         p.value = style_pvalue(p.value, digits = 2)) %&gt;% \n  gt() %&gt;% \n  tab_style(\n    style = list(\n      cell_fill(color = \"lightcyan\"),\n      cell_text(weight = \"bold\")\n      ),\n    locations = cells_body(\n      columns = everything(),\n      rows = grepl(\"scrf\", term)\n    )\n  ) %&gt;% \n  fmt_number(columns = c(estimate, robust.se), n_sigfig = 2)"
  },
  {
    "objectID": "vignettes/Analysis.html#single-variable",
    "href": "vignettes/Analysis.html#single-variable",
    "title": "NHANES Mortality Analysis",
    "section": "Single variable",
    "text": "Single variable\n\n\nCode\nsens_single = readRDS(here::here(\"results\", \"metrics_wtd_100_singlevar_sens.rds\"))  %&gt;% \n  filter(!grepl(\"peak\", variable))\n\n\ndf_mortality_sens =\n  df_all %&gt;%\n  filter(num_valid_days &gt; 0) %&gt;%\n  filter(age_in_years_at_screening &gt;= 50 &\n           age_in_years_at_screening &lt; 80)  %&gt;% \n  filter(if_all(.cols = c(age_in_years_at_screening, gender,\n                          race_hispanic_origin, cat_education,\n                          cat_bmi, chd, chf, heartattack, stroke, cancer,\n                          bin_diabetes, cat_alcohol, cat_smoke, bin_mobilityproblem,\n                          general_health_condition, mortstat, permth_exm, total_PAXMTSM),\n                ~!is.na(.x))) %&gt;%\n  mutate(event_time = permth_exm / 12) %&gt;% \n  ungroup() %&gt;%\n  mutate(across(c(contains(\"total\"), contains(\"peak\")), ~DescTools::Winsorize(.x, quantile(.x, probs = c(0, 0.99))))) \n\ndata_summary = sens_single %&gt;%\n  group_by(variable) %&gt;%\n  mutate(ind = row_number()) %&gt;%\n  summarize(across(concordance, list(\n    mean = ~ mean(.x), se = ~ sd(.x) / sqrt(n())\n  ))) %&gt;%\n  mutate(variable_fac = factor(\n    variable\n    # labels = vlabs\n  ))\n\ndf_means =\n  df_mortality_sens %&gt;%\n  group_by(mortstat) %&gt;%\n  summarize(across(c(contains(\"total\"), contains(\"peak\")), ~ mean(.x))) %&gt;%\n  pivot_longer(cols = -mortstat) %&gt;%\n  pivot_wider(names_from = mortstat,\n              values_from = value,\n              names_prefix = 'died_') %&gt;%\n  rename(variable = name)\n\n# get the best variable based on concodance\nbest_var = data_summary %&gt;%\n  arrange(desc(concordance_mean)) %&gt;%\n  slice(1) %&gt;%\n  pull(variable)\n\nbest_var_vec = sens_single %&gt;%\n  filter(variable == best_var) %&gt;%\n  pull(concordance)\n\nt_tests = sens_single %&gt;%\n  group_by(variable) %&gt;%\n  filter(variable != best_var) %&gt;%\n  nest() %&gt;%\n  mutate(t_test = map(\n    data,\n    ~ t.test(\n      .x$concordance,\n      best_var_vec,\n      var.eq = FALSE,\n      paired = FALSE,\n      alternative = \"less\"\n    )\n  ),\n  res = map(t_test, tidy)) %&gt;%\n  unnest(res) %&gt;%\n  ungroup() %&gt;%\n  select(variable, p.value)\n\n# join t tests with summary data and make table\ndata_summary %&gt;%\n  left_join(t_tests) %&gt;%\n  left_join(df_means) %&gt;%\n  arrange(desc(concordance_mean)) %&gt;%\n  mutate(\n    variable_fac = forcats::fct_reorder(variable_fac, concordance_mean),\n    lb = concordance_mean - 1.96 * concordance_se,\n    ub = concordance_mean + 1.96 * concordance_se,\n    ci = paste0(\n      sprintf(\"%0.3f\", round(concordance_mean, 3)),\n      \" (\",\n      sprintf(\"%0.3f\", round(lb, 3)),\n      \", \",\n      sprintf(\"%0.3f\", round(ub, 3)),\n      \")\"\n    )\n  ) %&gt;%\n  select(variable_fac,\n         ci,\n         p.value,\n         total_alive = died_0,\n         total_deceased = died_1) %&gt;%\n  mutate(pvalue = style_pvalue(p.value, digits = 3)) %&gt;%\n  mutate(pvalue = ifelse(is.na(pvalue), \"---\", pvalue),\n         across(starts_with(\"mean\"), ~ if_else(is.na(.x), \"---\", as.character(round(\n           .x, 0\n         ))))) %&gt;%\n  rename(\n    Variable = variable_fac,\n    \"Mean (95% CI)\" = ci,\n    \"p-value\" = pvalue,\n    \"Mean value among alive\" = total_alive,\n    \"Mean value among deceased\" = total_deceased\n  ) %&gt;%\n  gt::gt() %&gt;%\n  gt::fmt_number(columns = starts_with(\"mean\"), decimals = 0) %&gt;%\n  gt::tab_style(\n    style = list(cell_text(weight = \"bold\")),\n    locations = cells_body(columns = everything(), rows = p.value &gt; 0.05 |\n                             is.na(p.value))\n  ) %&gt;%\n  gt::cols_hide(p.value) %&gt;%\n  tab_header(title = \"100x 10-fold Cross-Validated Single Variable Concordance\") %&gt;%\n  tab_footnote(footnote = \"p-value for one sided t-test comparing variable to variable with higest mean concordance\",\n               locations = cells_column_labels(columns = \"p-value\")) %&gt;%\n  cols_align(columns = everything(), align = \"left\")\n\n\n\n\n\n\n\n\n100x 10-fold Cross-Validated Single Variable Concordance\n\n\nVariable\nMean (95% CI)\nMean value among alive\nMean value among deceased\np-value1\n\n\n\n\ntotal_scrfsteps\n0.732 (0.728, 0.736)\n10,591\n6,502\n---\n\n\ntotal_adeptsteps\n0.724 (0.720, 0.728)\n2,391\n1,380\n0.002\n\n\ntotal_oaksteps\n0.723 (0.720, 0.727)\n10,845\n7,067\n&lt;0.001\n\n\ntotal_vsrevsteps\n0.719 (0.715, 0.723)\n8,021\n4,878\n&lt;0.001\n\n\ntotal_vssteps\n0.716 (0.712, 0.720)\n8,885\n5,885\n&lt;0.001\n\n\ntotal_actisteps\n0.711 (0.707, 0.714)\n11,790\n8,740\n&lt;0.001\n\n\ntotal_scsslsteps\n0.703 (0.699, 0.707)\n8,786\n5,784\n&lt;0.001\n\n\ntotal_AC\n0.689 (0.685, 0.692)\n2,454,243\n1,900,197\n&lt;0.001\n\n\ntotal_PAXMTSM\n0.683 (0.680, 0.687)\n13,002\n10,438\n&lt;0.001\n\n\nbin_mobilityproblem\n0.675 (0.672, 0.678)\nNA\nNA\n&lt;0.001\n\n\nage_in_years_at_screening\n0.672 (0.668, 0.675)\nNA\nNA\n&lt;0.001\n\n\ngeneral_health_condition\n0.664 (0.661, 0.668)\nNA\nNA\n&lt;0.001\n\n\ntotal_log10PAXMTSM\n0.650 (0.646, 0.654)\n987\n884\n&lt;0.001\n\n\ntotal_log10AC\n0.633 (0.629, 0.637)\n2,939\n2,708\n&lt;0.001\n\n\nbin_diabetes\n0.591 (0.588, 0.594)\nNA\nNA\n&lt;0.001\n\n\ncat_smoke\n0.587 (0.584, 0.591)\nNA\nNA\n&lt;0.001\n\n\ncat_education\n0.574 (0.571, 0.577)\nNA\nNA\n&lt;0.001\n\n\nchd\n0.551 (0.549, 0.553)\nNA\nNA\n&lt;0.001\n\n\ncat_alcohol\n0.550 (0.546, 0.554)\nNA\nNA\n&lt;0.001\n\n\nchf\n0.549 (0.547, 0.551)\nNA\nNA\n&lt;0.001\n\n\ngender\n0.546 (0.542, 0.549)\nNA\nNA\n&lt;0.001\n\n\nheartattack\n0.546 (0.544, 0.547)\nNA\nNA\n&lt;0.001\n\n\ncancer\n0.538 (0.536, 0.541)\nNA\nNA\n&lt;0.001\n\n\nstroke\n0.532 (0.530, 0.533)\nNA\nNA\n&lt;0.001\n\n\nrace_hispanic_origin\n0.526 (0.525, 0.528)\nNA\nNA\n&lt;0.001\n\n\ncat_bmi\n0.519 (0.515, 0.522)\nNA\nNA\n&lt;0.001\n\n\n\n1 p-value for one sided t-test comparing variable to variable with higest mean concordance\n\n\n\n\n\n\n\n\n\n\nCode\nsens_male_single = readRDS(here::here(\"results\", \"metrics_wtd_100_singlevar_male_sens.rds\"))  %&gt;% \n  filter(!grepl(\"peak\", variable))\nsens_female_single = readRDS(here::here(\"results\", \"metrics_wtd_100_singlevar_female_sens.rds\")) %&gt;% \n  filter(!grepl(\"peak\", variable))\n\ndf_mortality_sens =\n  df_all %&gt;%\n  filter(num_valid_days &gt; 0) %&gt;%\n  filter(age_in_years_at_screening &gt;= 50 &\n           age_in_years_at_screening &lt; 80)  %&gt;% \n  filter(if_all(.cols = c(age_in_years_at_screening, gender,\n                          race_hispanic_origin, cat_education,\n                          cat_bmi, chd, chf, heartattack, stroke, cancer,\n                          bin_diabetes, cat_alcohol, cat_smoke, bin_mobilityproblem,\n                          general_health_condition, mortstat, permth_exm, total_PAXMTSM),\n                ~!is.na(.x))) %&gt;%\n  mutate(event_time = permth_exm / 12) %&gt;% \n  ungroup() %&gt;%\n  mutate(across(c(contains(\"total\"), contains(\"peak\")), ~DescTools::Winsorize(.x, quantile(.x, probs = c(0, 0.99))))) \n\ndata_summary = sens_male_single %&gt;%\n  group_by(variable) %&gt;%\n  mutate(ind = row_number()) %&gt;%\n  summarize(across(concordance, list(\n    mean = ~ mean(.x), se = ~ sd(.x) / sqrt(n())\n  ))) %&gt;%\n  mutate(variable_fac = factor(\n    variable\n    # labels = vlabs\n  ))\n\ndf_means =\n  df_mortality_sens %&gt;%\n  filter(gender == \"Male\") %&gt;%\n  group_by(mortstat) %&gt;%\n  summarize(across(c(contains(\"total\"), contains(\"peak\")), ~ mean(.x))) %&gt;%\n  pivot_longer(cols = -mortstat) %&gt;%\n  pivot_wider(names_from = mortstat,\n              values_from = value,\n              names_prefix = 'died_') %&gt;%\n  rename(variable = name)\n\n# get the best variable based on concodance\nbest_var = data_summary %&gt;%\n  arrange(desc(concordance_mean)) %&gt;%\n  slice(1) %&gt;%\n  pull(variable)\n\nbest_var_vec = sens_male_single %&gt;%\n  filter(variable == best_var) %&gt;%\n  pull(concordance)\n\nt_tests = sens_male_single %&gt;%\n  group_by(variable) %&gt;%\n  filter(variable != best_var) %&gt;%\n  nest() %&gt;%\n  mutate(t_test = map(\n    data,\n    ~ t.test(\n      .x$concordance,\n      best_var_vec,\n      var.eq = FALSE,\n      paired = FALSE,\n      alternative = \"less\"\n    )\n  ),\n  res = map(t_test, tidy)) %&gt;%\n  unnest(res) %&gt;%\n  ungroup() %&gt;%\n  select(variable, p.value)\n\n# join t tests with summary data and make table\ndata_summary %&gt;%\n  left_join(t_tests) %&gt;%\n  left_join(df_means) %&gt;%\n  arrange(desc(concordance_mean)) %&gt;%\n  mutate(\n    variable_fac = forcats::fct_reorder(variable_fac, concordance_mean),\n    lb = concordance_mean - 1.96 * concordance_se,\n    ub = concordance_mean + 1.96 * concordance_se,\n    ci = paste0(\n      sprintf(\"%0.3f\", round(concordance_mean, 3)),\n      \" (\",\n      sprintf(\"%0.3f\", round(lb, 3)),\n      \", \",\n      sprintf(\"%0.3f\", round(ub, 3)),\n      \")\"\n    )\n  ) %&gt;%\n  select(variable_fac,\n         ci,\n         p.value,\n         total_alive = died_0,\n         total_deceased = died_1) %&gt;%\n  mutate(pvalue = style_pvalue(p.value, digits = 3)) %&gt;%\n  mutate(pvalue = ifelse(is.na(pvalue), \"---\", pvalue),\n         across(starts_with(\"mean\"), ~ if_else(is.na(.x), \"---\", as.character(round(\n           .x, 0\n         ))))) %&gt;%\n  rename(\n    Variable = variable_fac,\n    \"Mean (95% CI)\" = ci,\n    \"p-value\" = pvalue,\n    \"Mean value among alive\" = total_alive,\n    \"Mean value among deceased\" = total_deceased\n  ) %&gt;%\n  gt::gt() %&gt;%\n  gt::fmt_number(columns = starts_with(\"mean\"), decimals = 0) %&gt;%\n  gt::tab_style(\n    style = list(cell_text(weight = \"bold\")),\n    locations = cells_body(columns = everything(), rows = p.value &gt; 0.05 |\n                             is.na(p.value))\n  ) %&gt;%\n  gt::cols_hide(p.value) %&gt;%\n  tab_header(title = \"100x 10-fold Cross-Validated Single Variable Concordance\", subtitle = \"Male\") %&gt;%\n  tab_footnote(footnote = \"p-value for one sided t-test comparing variable to variable with higest mean concordance\",\n               locations = cells_column_labels(columns = \"p-value\")) %&gt;%\n  cols_align(columns = everything(), align = \"left\")\n\n\n\n\ndata_summary = sens_female_single %&gt;%\n  group_by(variable) %&gt;%\n  summarize(across(concordance, list(\n    mean = ~ mean(.x), se = ~ sd(.x) / sqrt(n())\n  ))) %&gt;%\n  mutate(variable_fac = factor(\n    variable\n    # labels = vlabs\n    ))\n\ndf_means =\n  df_mortality_sens %&gt;%\n  filter(gender == \"Female\") %&gt;%\n  group_by(mortstat) %&gt;%\n  summarize(across(c(contains(\"total\"), contains(\"peak\")), ~ mean(.x))) %&gt;%\n  pivot_longer(cols = -mortstat) %&gt;%\n  pivot_wider(names_from = mortstat,\n              values_from = value,\n              names_prefix = 'died_') %&gt;%\n  rename(variable = name)\n\n# get the best variable based on concodance\nbest_var = data_summary %&gt;%\n  arrange(desc(concordance_mean)) %&gt;%\n  slice(1) %&gt;%\n  pull(variable)\n\nbest_var_vec = sens_female_single %&gt;%\n  filter(variable == best_var) %&gt;%\n  pull(concordance)\n\nt_tests = sens_female_single%&gt;%\n  group_by(variable) %&gt;%\n  filter(variable != best_var) %&gt;%\n  nest() %&gt;%\n  mutate(t_test = map(\n    data,\n    ~ t.test(\n      .x$concordance,\n      best_var_vec,\n      var.eq = FALSE,\n      paired = FALSE,\n      alternative = \"less\"\n    )\n  ),\n  res = map(t_test, tidy)) %&gt;%\n  unnest(res) %&gt;%\n  ungroup() %&gt;%\n  select(variable, p.value)\n\n# join t tests with summary data and make table\ndata_summary %&gt;%\n  left_join(t_tests) %&gt;%\n  left_join(df_means) %&gt;%\n  arrange(desc(concordance_mean)) %&gt;%\n  mutate(\n    variable_fac = forcats::fct_reorder(variable_fac, concordance_mean),\n    lb = concordance_mean - 1.96 * concordance_se,\n    ub = concordance_mean + 1.96 * concordance_se,\n    ci = paste0(\n      sprintf(\"%0.3f\", round(concordance_mean, 3)),\n      \" (\",\n      sprintf(\"%0.3f\", round(lb, 3)),\n      \", \",\n      sprintf(\"%0.3f\", round(ub, 3)),\n      \")\"\n    )\n  ) %&gt;%\n  select(variable_fac,\n         ci,\n         p.value,\n         total_alive = died_0,\n         total_deceased = died_1) %&gt;%\n  mutate(pvalue = style_pvalue(p.value, digits = 3)) %&gt;%\n  mutate(pvalue = ifelse(is.na(pvalue), \"---\", pvalue),\n         across(starts_with(\"mean\"), ~ if_else(is.na(.x), \"---\", as.character(round(\n           .x, 0\n         ))))) %&gt;%\n  rename(\n    Variable = variable_fac,\n    \"Mean (95% CI)\" = ci,\n    \"p-value\" = pvalue,\n    \"Mean value among alive\" = total_alive,\n    \"Mean value among deceased\" = total_deceased\n  ) %&gt;%\n  gt::gt() %&gt;%\n  gt::fmt_number(columns = starts_with(\"mean\"), decimals = 0) %&gt;%\n  gt::tab_style(\n    style = list(cell_text(weight = \"bold\")),\n    locations = cells_body(columns = everything(), rows = p.value &gt; 0.05 |\n                             is.na(p.value))\n  ) %&gt;%\n  gt::cols_hide(p.value) %&gt;%\n  tab_header(title = \"100x 10-fold Cross-Validated Single Variable Concordance\", subtitle = \"Female\") %&gt;%\n  tab_footnote(footnote = \"p-value for one sided t-test comparing variable to variable with higest mean concordance\",\n               locations = cells_column_labels(columns = \"p-value\")) %&gt;%\n  cols_align(columns = everything(), align = \"left\")"
  },
  {
    "objectID": "vignettes/Analysis.html#multivariable",
    "href": "vignettes/Analysis.html#multivariable",
    "title": "NHANES Mortality Analysis",
    "section": "Multivariable",
    "text": "Multivariable\n\n\nCode\nsens_all = readRDS(here::here(\"results\", \"metrics_wtd_100_sens.rds\"))\nwt_small = \n  sens_all %&gt;% \n  filter(model %in% c(\"Demo only\", \"scrfsteps+PAXMTSM\", \"scrfsteps\", \"PAXMTSM\"))\n\nsummary = \n  wt_small %&gt;% \n  group_by(model) %&gt;% \n  summarize(across(concordance, list(mean = ~mean(.x),\n                                       se = ~sd(.x)/sqrt(n())))) %&gt;% \n  mutate(model_fac = factor(model, labels = c(\"Demographics only\",\n                                              \"Demographics + MIMS\", \n                                              \"Demographics + Stepcount RF\",\n                                              \"Demographics + Stepcount RF + MIMS\")))\n\ncoef_scrf = \n  df_mortality_sens %&gt;% \n  mutate(\n     weight = full_sample_2_year_mec_exam_weight / 2,\n                weight_norm = weight / mean(weight)) %&gt;% \n  coxph(Surv(event_time, mortstat) ~ total_scrfsteps + gender + \n          age_in_years_at_screening + cat_education + bin_diabetes + cat_bmi + \n          race_hispanic_origin + chf + general_health_condition + chd + \n          heartattack + cancer + stroke + cat_alcohol + cat_smoke + \n          bin_mobilityproblem, weights = weight_norm, data  = .) %&gt;% \n  tidy() %&gt;% \n  select(term, estimate, std.error, robust.se, p.value) %&gt;% \n  filter(grepl(\"steps\", term)) %&gt;% \n  mutate(hr = exp(estimate * 500), \n         lb = exp((estimate - 1.96 * std.error) * 500),\n         ub = exp((estimate + 1.96 * std.error) * 500),\n         model = \"scrfsteps\")\n  \ncoef_mims = \n  df_mortality_sens %&gt;% \n  mutate(\n     weight = full_sample_2_year_mec_exam_weight / 2,\n                weight_norm = weight / mean(weight)) %&gt;% \n  coxph(Surv(event_time, mortstat) ~ total_PAXMTSM + total_scrfsteps + gender + \n          age_in_years_at_screening + cat_education + bin_diabetes + cat_bmi + \n          race_hispanic_origin + chf + general_health_condition + chd + \n          heartattack + cancer + stroke + cat_alcohol + cat_smoke + \n          bin_mobilityproblem, weights = weight_norm, data  = .) %&gt;% \n  tidy() %&gt;% \n  select(term, estimate, std.error, robust.se, p.value) %&gt;% \n  filter(grepl(\"steps\", term)) %&gt;% \n  mutate(hr = exp(estimate * 500), \n         lb = exp((estimate - 1.96 * std.error) * 500),\n         ub = exp((estimate + 1.96 * std.error) * 500),\n         model = \"scrfsteps+PAXMTSM\")\n  \ncoefs = bind_rows(coef_scrf, coef_mims)\nsummary %&gt;% \n  left_join(coefs)  %&gt;% \n  mutate(conc_lb = concordance_mean - 1.96 * concordance_se,\n         conc_ub = concordance_mean + 1.96 * concordance_se,\n         conc_ci = paste0(sprintf(\"%0.3f\",round(concordance_mean, 3)),\n                       \" (\", sprintf(\"%0.3f\",round(conc_lb, 3)), \", \", sprintf(\"%0.3f\",round(conc_ub, 3)), \")\"),\n         hr_ci = case_when(!is.na(hr) ~ paste0(sprintf(\"%0.3f\",round(hr, 3)),\n                       \" (\", sprintf(\"%0.3f\",round(lb, 3)), \", \", sprintf(\"%0.3f\",round(ub, 3)), \")\"),\n                       TRUE ~ \"---\"),\n         p.value = format.pval(p.value, digits = 3)) %&gt;% \n  select(model_fac, hr_ci,p.value, conc_ci) %&gt;% \n  rename(Model = model_fac,\n         \"Steps HR\" = hr_ci,\n         \"Steps p-value\" = p.value,\n         \"Model concordance\" = conc_ci) %&gt;% \n  gt::gt() %&gt;%\n    # gt::fmt_number(columns = starts_with(\"mean\"), decimals = 0) %&gt;% \n    tab_header(title = \"Multivariable Model Comparison\") %&gt;%\n    cols_align(columns = everything(), align = \"left\")\n\n\n\n\n\n\n\n\nMultivariable Model Comparison\n\n\nModel\nSteps HR\nSteps p-value\nModel concordance\n\n\n\n\nDemographics only\n---\nNA\n0.768 (0.765, 0.771)\n\n\nDemographics + MIMS\n---\nNA\n0.773 (0.770, 0.776)\n\n\nDemographics + Stepcount RF\n0.952 (0.937, 0.967)\n1.94e-05\n0.776 (0.773, 0.779)\n\n\nDemographics + Stepcount RF + MIMS\n0.943 (0.920, 0.966)\n0.00218\n0.775 (0.771, 0.778)\n\n\n\n\n\n\n\nCode\ntb = \n  summary %&gt;% \n  left_join(coefs)  %&gt;% \n  mutate(conc_lb = concordance_mean - 1.96 * concordance_se,\n         conc_ub = concordance_mean + 1.96 * concordance_se,\n         conc_ci = paste0(sprintf(\"%0.3f\",round(concordance_mean, 3)),\n                       \" (\", sprintf(\"%0.3f\",round(conc_lb, 3)), \", \", sprintf(\"%0.3f\",round(conc_ub, 3)), \")\"),\n         hr_ci = case_when(!is.na(hr) ~ paste0(sprintf(\"%0.3f\",round(hr, 3)),\n                       \" (\", sprintf(\"%0.3f\",round(lb, 3)), \", \", sprintf(\"%0.3f\",round(ub, 3)), \")\"),\n                       TRUE ~ \"---\"),\n         p.value = format.pval(p.value, digits = 3)) %&gt;% \n  select(model_fac, hr_ci,p.value, conc_ci) %&gt;% \n  rename(Model = model_fac,\n         \"Steps HR\" = hr_ci,\n         \"Steps p-value\" = p.value,\n         \"Model concordance\" = conc_ci) %&gt;% \n  gt::gt() %&gt;%\n    # gt::fmt_number(columns = starts_with(\"mean\"), decimals = 0) %&gt;% \n    tab_header(title = \"Multivariable Model Comparison\",\n               subtitle = \"Female\") %&gt;%\n    cols_align(columns = everything(), align = \"left\") %&gt;% \n  data.frame() %&gt;% \n  kableExtra::kbl(format = \"latex\")\n\n\n\n\nCode\nsens_male = readRDS(here::here(\"results\", \"metrics_wtd_100_male_sens.rds\"))  \nsens_female = readRDS(here::here(\"results\", \"metrics_wtd_100_female_sens.rds\"))  \n\nsens_male %&gt;%\n  group_by(model) %&gt;%\n  summarize(across(concordance, list(\n    mean = ~ mean(.x), se = ~ sd(.x) / sqrt(n())\n  ))) %&gt;%\n  arrange(desc(concordance_mean))\n\nsens_female %&gt;%\n  group_by(model) %&gt;%\n  summarize(across(concordance, list(\n    mean = ~ mean(.x), se = ~ sd(.x) / sqrt(n())\n  ))) %&gt;%\n  arrange(desc(concordance_mean))"
  },
  {
    "objectID": "vignettes/Physionet_Download.html",
    "href": "vignettes/Physionet_Download.html",
    "title": "Data Download Vignette",
    "section": "",
    "text": "The following code can be used to download minute-level step counts and other data from NHANES 2011-2014 from our Physionet repository\n\nif(!dir.exists(here::here(\"data\", \"accelerometry\", \"minute_level\"))) {\n  dir.create(here::here(\"data\", \"accelerometry\", \"minute_level\"),\n             recursive = TRUE)\n}\n\ndownload_file = function(name) {\n  out_file =\n    here::here(\"data\",\n               \"accelerometry\",\n               \"minute_level\",\n               paste0(\"nhanes_1440_\", name, \".csv.xz\"))\n  if (!file.exists(out_file)) {\n    url = paste0(\n      \"https://physionet.org/files/minute-level-step-count-nhanes/1.0.0/nhanes_1440_\",\n      name,\n      \".csv.xz\"\n    )\n    system(paste(\n      \"wget -q --show-progress -O\",\n      shQuote(out_file),\n      shQuote(url)\n    ),\n    wait = TRUE)\n    \n  }\n}\n\nfile_names = c(\n  \"AC\",\n  \"PAXFLGSM\",\n  \"PAXPREDM\",\n  \"actisteps\",\n  \"adeptsteps\",\n  \"log10AC\",\n  \"log10PAXMTSM\",\n  \"oaksteps\",\n  \"scrfsteps\",\n  \"scsslsteps\",\n  \"vsrevsteps\",\n  \"vssteps\"\n)\npurrr::walk(.x = file_names, .f = download_file)\n\nWe can read in one file to get a sense of the structure. There are columns for ID, day, weekday, and each minute of the day (min_1 to min_1440). Missingness indicates that either:\n\ndata were missing for that minute (i.e. wear hadn’t started yet)\nNHANES gave a wear flag for that minute, or\nthe NHANES prediction for that minute was nonwear\n\n\nsc_steps = read_csv(\n  here::here(\n    \"data\",\n    \"accelerometry\",\n    \"minute_level\",\n    \"nhanes_1440_scsslsteps.csv.xz\"\n  )\n)\n\nsc_steps %&gt;%\n  select(\n    SEQN,\n    PAXDAYM,\n    PAXDAYWM,\n    min_1,\n    min_100,\n    min_200,\n    min_300,\n    min_400,\n    min_600,\n    min_800,\n    min_1000\n  ) %&gt;%\n  glimpse()\n\nRows: 130,186\nColumns: 11\n$ SEQN     &lt;dbl&gt; 73557, 73557, 73557, 73557, 73557, 73557, 73557, 73557, 73557…\n$ PAXDAYM  &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3…\n$ PAXDAYWM &lt;dbl&gt; 3, 4, 5, 6, 7, 1, 2, 3, 4, 2, 3, 4, 5, 6, 7, 1, 2, 3, 7, 1, 2…\n$ min_1    &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 0, 0, 0, 0, 0, 0, 0, …\n$ min_100  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 0, 0, 0, 0, 0, 0, 0, …\n$ min_200  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 0, 0, 0, 0, 0, 37, 0,…\n$ min_300  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 0, 0, 0, 0, 0, 0, 0, …\n$ min_400  &lt;dbl&gt; NA, NA, NA, NA, 63, NA, NA, NA, NA, NA, 0, 0, 0, 0, 0, 0, 0, …\n$ min_600  &lt;dbl&gt; NA, 0, NA, NA, 0, 46, 0, NA, NA, NA, 0, 0, 0, 16, 0, 0, 0, NA…\n$ min_800  &lt;dbl&gt; NA, 0, NA, NA, 0, 58, 0, 59, 0, NA, 0, 0, 0, 54, 79, 0, 0, NA…\n$ min_1000 &lt;dbl&gt; 0, 0, NA, NA, NA, 0, 41, NA, NA, NA, 0, 59, 0, 0, 0, 0, 0, NA…"
  },
  {
    "objectID": "vignettes/NHANES_Steps_Mortality_Vignette.html",
    "href": "vignettes/NHANES_Steps_Mortality_Vignette.html",
    "title": "NHANES Steps Vignette",
    "section": "",
    "text": "Code# load packages and define colors \nlibrary(tidyverse)\nlibrary(gtsummary)\nlibrary(gt)\nlibrary(tidymodels)\nlibrary(censored)\nlibrary(paletteer)\nlibrary(survey)\nlibrary(patchwork)\nlibrary(consort)\nlibrary(data.table)\ncol1 = \"#CC5151\"; col2 = \"#422CB2\" # from paletteer_d(\"colorBlindness::SteppedSequential5Steps\")\n# paletteer_d(\"ggthemes::colorblind\") # for colorblind friendly palette\ncol_vec = c(\"#000000FF\", \"#009E73FF\", \"#CC79A7FF\", \"#E69F00FF\", \"#D55E00FF\", \"#56B4E9FF\", \"#0072B2FF\")\n\nwinsorize = function (x, val = quantile(x, probs = c(0.05, 0.95), na.rm = FALSE)) {\n  x[x &lt; val[1L]] &lt;- val[1L]\n  x[x &gt; val[2L]] &lt;- val[2L]\n  return(x)\n}\nThe purpose of this vignette is to accompany xxx manuscript on step counts in NHANES 2011-2014."
  },
  {
    "objectID": "vignettes/NHANES_Steps_Mortality_Vignette.html#population-characteristics",
    "href": "vignettes/NHANES_Steps_Mortality_Vignette.html#population-characteristics",
    "title": "NHANES Steps Vignette",
    "section": "Population characteristics",
    "text": "Population characteristics\nFor the remainder of the analysis, we exclude individuals younger than 18 and individuals without at least 3 days of valid accelerometry data.\n\nCodedf_accel =\n  df_all %&gt;%\n  filter(num_valid_days &gt;= 3 & age_in_years_at_screening &gt;= 18)\n\n\nWe make a survey-weighted table of population characteristics for these individuals:\n\nCodelabs = c(\n  \"SEQN\",\n  \"Data release cycle\",\n  \"Interview Examination Status\",\n  \"Sex\",\n  \"Age (yrs)\",\n  \"Age (mos)\",\n  \"Race/ethnicity\",\n  \"Six month time period\",\n  \"Educ. level adults\",\n  \"Marital status\",\n  \"2 yr int weight\",\n  \"2 yr exam weight\",\n  \"Pseudo PSU\",\n  \"Psueudo stratum\",\n  \"Annual HH income\",\n  \"Weight (kg)\",\n  \"Height (cm)\",\n  \"BMI (kg/m2)\",\n  \"Overweight\",\n  \"Diabetes orig.\",\n  \"Diabetes\",\n  \"Arthritis\",\n  \"Coronary Heart Failure\",\n  \"Congenital Heart Disease\",\n  \"Angina\",\n  \"Heart attack\",\n  \"Stroke\",\n  \"Cancer\",\n  colnames(df_all)[29:33],\n  \"Alcohol use\",\n  \"BMI Category\",\n  \"Smoking status\",\n  \"Mobility problem\",\n  \"General health condition\",\n  \"Eligbility\",\n  \"Died by 5 years follow up\",\n  \"COD\",\n  \"COD Diabetes\",\n  \"COD Hypertension\",\n  \"Person-months follow up from interview\",\n  \"Person-months follow up from exam\",\n  \"Eligibility category\",\n  \"COD category\",\n  \"AC\",\n  \"MIMS\",\n  \"Actilife steps\",\n  \"ADEPT steps\",\n  \"log10 AC\",\n  \"log10 MIMS\",\n  \"Oak steps\",\n  \"Sc. RF steps\",\n  \"Sc. SSL steps\",\n  \"Verisense rev. steps\",\n  \"Verisense steps\",\n  \"Peak1 AC\",\n  \"Peak1 MIMS\",\n  \"Peak1 Actilife steps\",\n  \"Peak1 ADEPT steps\",\n  \"Peak1 log10 AC\",\n  \"Peak1 log10 MIMS\",\n  \"Peak1 Oak steps\",\n  \"Peak1 Sc. RF steps\",\n  \"Peak1 Sc. SSL steps\",\n  \"Peak1 Verisense rev. steps\",\n  \"Peak1 Verisense steps\",\n  \"Peak30 AC\",\n  \"Peak30 MIMS\",\n  \"Peak30 Actilife steps\",\n  \"Peak30 ADEPT steps\",\n  \"Peak30 log10 AC\",\n  \"Peak30 log10 MIMS\",\n  \"Peak30 Oak steps\",\n  \"Peak30 Sc. RF steps\",\n  \"Peak30 Sc. SSL steps\",\n  \"Peak30 Verisense rev. steps\",\n  \"Peak30 Verisense steps\",\n  \"No. valid days\",\n  \"Received accelerometer\",\n  \"Valid accelerometry\",\n  \"Inclusion category\",\n  \"Education level\"\n)\nnames(labs) = colnames(df_accel)\n\ndf_tab1 =\n  df_all %&gt;%\n  labelled::set_variable_labels(!!!labs)\n\n# survey weighted table\n# question about this!!\ndf_svy =\n  df_tab1 %&gt;%\n  filter(has_accel) %&gt;%\n  filter(valid_accel) %&gt;%\n  select(\n    gender,\n    age_in_years_at_screening,\n    race_hispanic_origin,\n    cat_education,\n    cat_bmi,\n    bin_diabetes,\n    chf,\n    chd,\n    stroke,\n    cat_alcohol,\n    cat_smoke,\n    bin_mobilityproblem,\n    general_health_condition,\n    mortstat,\n    data_release_cycle,\n    masked_variance_pseudo_psu,\n    masked_variance_pseudo_stratum,\n    full_sample_2_year_mec_exam_weight\n  )  %&gt;%\n  mutate(WTMEC4YR = full_sample_2_year_mec_exam_weight / 2,\n         WTMEC4YR_norm = WTMEC4YR / mean(WTMEC4YR, na.rm = TRUE)) %&gt;%\n  select(-full_sample_2_year_mec_exam_weight) %&gt;%\n  svydesign(\n    ids = ~ masked_variance_pseudo_psu,\n    weights = ~ WTMEC4YR_norm,\n    strata = ~ masked_variance_pseudo_stratum,\n    data = .,\n    nest = TRUE\n  )\n\n# survey weighted table\ntab = df_svy %&gt;%\n  tbl_svysummary(\n    by = data_release_cycle,\n    include = -c(\n      masked_variance_pseudo_psu,\n      masked_variance_pseudo_stratum,\n      WTMEC4YR,\n      WTMEC4YR_norm\n    ),\n    statistic = list(\n      all_continuous() ~ \"{mean} ({sd})\",\n      all_categorical() ~ \"{n} ({p}%)\"\n    ),\n    digits = all_continuous() ~ 2,\n    missing_text = \"Missing\",\n  ) %&gt;%\n  add_overall() %&gt;%\n  modify_caption(\"Demographic Characteristics, All Adults\") \ntab\n\n\n\n\nDemographic Characteristics, All Adults\n\n\n\n\n\n\n\nCharacteristic\n\nOverall N = 12,5171\n\n\n7 N = 6,2341\n\n\n8 N = 6,2831\n\n\n\n\nSex\n\n\n\n\n\n    Female\n6,508 (52%)\n3,239 (52%)\n3,269 (52%)\n\n\n    Male\n6,009 (48%)\n2,995 (48%)\n3,014 (48%)\n\n\nAge (yrs)\n40.99 (21.49)\n41.47 (21.07)\n40.53 (21.89)\n\n\nRace/ethnicity\n\n\n\n\n\n    Non-Hispanic White\n8,013 (64%)\n4,034 (65%)\n3,979 (63%)\n\n\n    Non-Hispanic Black\n1,484 (12%)\n751 (12%)\n734 (12%)\n\n\n    Other Race - Including Multi-Rac\n972 (7.8%)\n457 (7.3%)\n515 (8.2%)\n\n\n    Mexican American\n1,257 (10%)\n571 (9.2%)\n686 (11%)\n\n\n    Other Hispanic\n790 (6.3%)\n421 (6.7%)\n370 (5.9%)\n\n\nEducation level\n\n\n\n\n\n    More than HS\n6,193 (63%)\n3,125 (63%)\n3,068 (63%)\n\n\n    Less than HS\n1,560 (16%)\n824 (17%)\n736 (15%)\n\n\n    HS/HS equivalent\n2,098 (21%)\n1,029 (21%)\n1,069 (22%)\n\n\n    Missing\n2,666\n1,256\n1,410\n\n\nBMI Category\n\n\n\n\n\n    Normal\n3,743 (30%)\n1,920 (31%)\n1,823 (29%)\n\n\n    Obese\n3,891 (31%)\n1,887 (31%)\n2,004 (32%)\n\n\n    Overweight\n3,549 (29%)\n1,833 (30%)\n1,715 (27%)\n\n\n    Underweight\n1,240 (10.0%)\n540 (8.7%)\n700 (11%)\n\n\n    Missing\n94\n54\n41\n\n\nDiabetes\n1,052 (8.4%)\n508 (8.2%)\n543 (8.6%)\n\n\n    Missing\n7\n4\n3\n\n\nCoronary Heart Failure\n290 (2.9%)\n158 (3.2%)\n132 (2.7%)\n\n\n    Missing\n2,668\n1,260\n1,409\n\n\nCongenital Heart Disease\n371 (3.8%)\n170 (3.4%)\n201 (4.1%)\n\n\n    Missing\n2,684\n1,267\n1,417\n\n\nStroke\n309 (3.1%)\n164 (3.3%)\n145 (3.0%)\n\n\n    Missing\n2,665\n1,256\n1,408\n\n\nAlcohol use\n\n\n\n\n\n    Never drinker\n1,240 (9.9%)\n559 (9.0%)\n681 (11%)\n\n\n    Former drinker\n1,446 (12%)\n726 (12%)\n720 (11%)\n\n\n    Moderate drinker\n3,117 (25%)\n1,644 (26%)\n1,473 (23%)\n\n\n    Heavy drinker\n785 (6.3%)\n439 (7.0%)\n347 (5.5%)\n\n\n    Missing alcohol\n5,928 (47%)\n2,866 (46%)\n3,062 (49%)\n\n\nSmoking status\n\n\n\n\n\n    Never smoker\n5,656 (56%)\n2,758 (55%)\n2,898 (57%)\n\n\n    Former smoker\n2,449 (24%)\n1,256 (25%)\n1,192 (24%)\n\n\n    Current smoker\n1,912 (19%)\n962 (19%)\n950 (19%)\n\n\n    Missing\n2,501\n1,259\n1,242\n\n\nMobility problem\n1,656 (17%)\n749 (15%)\n907 (19%)\n\n\n    Missing\n2,668\n1,256\n1,413\n\n\nGeneral health condition\n\n\n\n\n\n    Poor\n282 (2.3%)\n127 (2.0%)\n155 (2.5%)\n\n\n    Fair\n1,684 (13%)\n789 (13%)\n895 (14%)\n\n\n    Good\n4,582 (37%)\n2,240 (36%)\n2,343 (37%)\n\n\n    Very good\n4,055 (32%)\n2,104 (34%)\n1,951 (31%)\n\n\n    Excellent\n1,913 (15%)\n974 (16%)\n939 (15%)\n\n\nDied by 5 years follow up\n761 (7.5%)\n416 (8.1%)\n345 (6.8%)\n\n\n    Missing\n2,370\n1,125\n1,245\n\n\n\n\n1 n (%); Mean (SD)"
  },
  {
    "objectID": "vignettes/NHANES_Steps_Mortality_Vignette.html#mean-physical-activity-variables",
    "href": "vignettes/NHANES_Steps_Mortality_Vignette.html#mean-physical-activity-variables",
    "title": "NHANES Steps Vignette",
    "section": "Mean physical activity variables",
    "text": "Mean physical activity variables\nWe can also make a table of the mean physical activity variables by wave and age group.\n\nCodedf_adult = df_accel %&gt;%\n  filter(age_in_years_at_screening &gt;= 18) %&gt;%\n  mutate(weight = full_sample_2_year_mec_exam_weight / 2,\n         weight_norm = weight / mean(weight)) %&gt;%\n  mutate(group = \"All adults\")\n\ndf_old = df_accel %&gt;%\n  filter(age_in_years_at_screening &gt;= 50) %&gt;%\n  mutate(weight = full_sample_2_year_mec_exam_weight / 2,\n         weight_norm = weight / mean(weight)) %&gt;%\n  mutate(group = \"50+\")\n\n\ndf = bind_rows(df_adult, df_old)\n\ndf = df %&gt;%\n  rename(\n    Verisense = \"total_vssteps\",\n    \"Verisense rev\" = \"total_vsrevsteps\",\n    Oak = \"total_oaksteps\",\n    ADEPT = \"total_adeptsteps\",\n    \"Stepcount RF\" =  \"total_scrfsteps\",\n    \"Stepcount SSL\" =  \"total_scsslsteps\",\n    MIMS = \"total_PAXMTSM\",\n    Actilife = \"total_actisteps\",\n    \"log10 MIMS\"  = \"total_log10PAXMTSM\",\n    \"log10 AC\" = \"total_log10AC\",\n    AC = \"total_AC\"\n  ) %&gt;%\n  select(!contains(\"peak\"))\n\ndf_analysis_svy = survey::svydesign(\n  id = ~ masked_variance_pseudo_psu,\n  strata = ~ masked_variance_pseudo_stratum,\n  weights = ~ weight_norm,\n  data = df,\n  nest = TRUE\n)\n\n\ntab = df_analysis_svy %&gt;%\n  tbl_strata(\n    strata = data_release_cycle,\n    .tbl_fun =\n      ~ .x %&gt;%\n      tbl_svysummary(\n        .,\n        include = c(\n          contains(\"Actilife\"),\n          contains(\"ADEPT\"),\n          contains(\"Oak\"),\n          contains(\"rf\"),\n          contains(\"ssl\"),\n          \"Verisense\",\n          \"Verisense rev\",\n          \"MIMS\",\n          \"log10 MIMS\",\n          \"AC\",\n          \"log10 AC\"\n        ),\n        by = group,\n        statistic = list(\n          all_continuous() ~ \"{mean} ({sd})\",\n          all_categorical() ~ \"{n} ({p}%)\"\n        )\n      ),\n    .header = \"**Wave {strata}**, N = {n}\"\n  ) %&gt;%\n  modify_caption(\"Physical Activity Mean Totals Stratified by Age and Wave\")\ntab\n\n\n\n\nPhysical Activity Mean Totals Stratified by Age and Wave\n\n\n\n\n\n\n\n\n\nCharacteristic\n\nWave 7, N = 6513\n\n\nWave 8, N = 6404\n\n\n\n\n50+ N = 2,1461\n\n\nAll adults N = 4,3671\n\n\n50+ N = 2,1071\n\n\nAll adults N = 4,2971\n\n\n\n\n\nActilife\n11,195 (4,001)\n12,169 (3,995)\n10,850 (4,008)\n11,902 (4,048)\n\n\nADEPT\n2,342 (1,593)\n2,659 (1,569)\n2,151 (1,680)\n2,453 (1,575)\n\n\nOak\n10,254 (5,027)\n11,794 (5,061)\n9,733 (4,886)\n11,381 (5,065)\n\n\nStepcount RF\n9,888 (5,542)\n11,509 (5,722)\n9,502 (5,442)\n11,263 (5,764)\n\n\nStepcount SSL\n8,358 (4,402)\n9,144 (4,400)\n8,027 (4,388)\n8,846 (4,399)\n\n\nVerisense\n8,337 (4,027)\n9,497 (4,062)\n7,974 (4,019)\n9,163 (4,065)\n\n\nVerisense rev\n7,532 (4,521)\n9,102 (4,756)\n7,122 (4,402)\n8,725 (4,730)\n\n\nMIMS\n12,435 (3,642)\n13,572 (3,758)\n12,243 (3,574)\n13,467 (3,784)\n\n\nlog10 MIMS\n960 (158)\n998 (154)\n952 (160)\n994 (155)\n\n\nAC\n2,333,927 (791,711)\n2,573,262 (815,192)\n2,291,942 (766,303)\n2,549,846 (816,305)\n\n\nlog10 AC\n2,878 (383)\n2,955 (366)\n2,847 (394)\n2,933 (370)\n\n\n\n\n1 Mean (SD)"
  },
  {
    "objectID": "vignettes/NHANES_Steps_Mortality_Vignette.html#distributions",
    "href": "vignettes/NHANES_Steps_Mortality_Vignette.html#distributions",
    "title": "NHANES Steps Vignette",
    "section": "Distributions",
    "text": "Distributions\nWe plot the distributions of each step and physical activity variable. We plot the 99th percentile with a vertical line to indicate the effect of Winsorizing at the 99th percentile. We choose to use the Winsorized variables in the mortality analysis since the raw distributions are all quite right-skewed.\n\nCodedf_accel_win =\n  df_accel %&gt;%\n  mutate(across(c(contains(\"total\"), contains(\"peak\")), ~winsorize(.x, quantile(.x, probs = c(0, 0.99)))))\n\n\nq99 = \n  df_accel %&gt;%\n  summarize(across(c(contains(\"total\")), ~quantile(.x, 0.99))) %&gt;% \n  pivot_longer(cols = contains(\"total\"), values_to = \"q\")\n\ndf_accel %&gt;%\n  select(contains(\"steps\") & contains(\"total\"), SEQN) %&gt;%\n  pivot_longer(cols = -c(SEQN)) %&gt;%\n  left_join(q99, by = \"name\") %&gt;%\n  mutate(name = factor(name, labels = c(\"Actilife steps\", \"ADEPT\", \"Oak\", \"Stepcount RF\", \"Stepcount SSL\", \"Verisense\", \"Verisense rev.\"))) %&gt;%\n  ggplot(aes(x = value / 1000))+\n  geom_density(fill = col1, color = col1) +\n  facet_wrap(.~name, nrow = 1)+\n  geom_vline(aes(xintercept = q/1000))+\n  theme_bw() +\n  theme(legend.position = \"none\",\n        panel.grid.minor.x = element_blank(),\n        axis.title = element_text(size = 14),\n        title = element_text(size = 14),\n        axis.text = element_text(size = 12),\n        strip.text = element_text(size = 12))+\n  labs(x = \"Mean Daily Steps x 1000\", y = \"Density\", title = \"Distribution of Mean Daily Step Counts\",\n       subtitle = \"All Individuals aged 18+ with Valid Accelerometry Data\")\n\n\n\n\n\n\nCodedf_accel %&gt;%\n  select(!contains(\"steps\") & contains(\"total\"), SEQN) %&gt;%\n  pivot_longer(cols = -c(SEQN)) %&gt;%\n  left_join(q99, by = \"name\") %&gt;%\n   mutate(name = factor(name, labels = c(\"AC\", \"log10 AC\", \"MIMS\", \"log10 MIMS\"))) %&gt;%\n  ggplot(aes(x = value / 1000))+\n  geom_density(fill = col2, color = col2) +\n  facet_wrap(.~name, nrow = 1, scales = \"free\")+\n  geom_vline(aes(xintercept = q/1000))+\n  theme_bw() +\n  theme(legend.position = \"none\",\n        panel.grid.minor.x = element_blank(),\n        axis.title = element_text(size = 14),\n        title = element_text(size = 14),\n        axis.text = element_text(size = 12),\n        strip.text = element_text(size = 12)) +\n  labs(x = \"Mean Daily Value x 1000\", y = \"Density\", title = \"Distribution of Mean Daily  Counts\",\n       subtitle = \"All Individuals aged 18+ with Valid Accelerometry Data\")"
  },
  {
    "objectID": "vignettes/NHANES_Steps_Mortality_Vignette.html#means-by-age",
    "href": "vignettes/NHANES_Steps_Mortality_Vignette.html#means-by-age",
    "title": "NHANES Steps Vignette",
    "section": "Means by age",
    "text": "Means by age\nNext we plot the survey-weighted means by age for each algorithm. First we calculate the survey-weghted means, then smooth the means and confidence intervals with a loess smooth.\n\nCodesurvey_design =\n  df_accel %&gt;%\n  filter(age_in_years_at_screening &gt;= 18 & age_in_years_at_screening &lt; 80) %&gt;%\n  mutate(weight = full_sample_2_year_mec_exam_weight / 2,\n         weight_norm = weight / mean(weight)) %&gt;%\n  ungroup()  %&gt;%\n  survey::svydesign(\n  id = ~ masked_variance_pseudo_psu,\n  strata = ~ masked_variance_pseudo_stratum,\n  weights = ~ weight_norm,\n  data = .,\n  nest = TRUE\n)\n\n# function to calculate mean estimates by age\ncalc_by_age =\n  function(var, df) {\n    # var = \"total_oaksteps\"\n    formula = as.formula(paste(\"~\", var))\n    total_by_age_gender = svyby(formula,\n                                ~ age_in_years_at_screening,\n                                df,\n                                svymean) %&gt;%\n      rename(mean = contains(var)) %&gt;%\n      mutate(metric = var)\n  }\n\nmeans_df =\n  map_dfr(.x = df_accel %&gt;% select(contains(\"total\") | contains(\"peak\")) %&gt;% colnames(),\n          .f = calc_by_age, df = survey_design)\n\n# get smooths for means and confidence intervals\nmodels = means_df %&gt;%\n  mutate(lb = mean - 1.96 * se,\n         ub = mean + 1.96 * se) %&gt;%\n  tidyr::nest(data = -c(metric)) %&gt;%\n  dplyr::mutate(\n    # Perform loess calculation on each group\n    m = purrr::map(data, loess,\n                   formula = mean ~ age_in_years_at_screening, span = .75),\n    # Retrieve the fitted values from each model\n    fitted_mean = purrr::map(m, `[[`, \"fitted\"),\n    l = purrr::map(data, loess,\n                   formula = lb ~ age_in_years_at_screening, span = .75),\n    # Retrieve the fitted values from each model\n    fitted_lb = purrr::map(l, `[[`, \"fitted\"),\n    u = purrr::map(data, loess,\n                   formula = ub ~ age_in_years_at_screening, span = .75),\n    # Retrieve the fitted values from each model\n    fitted_ub = purrr::map(u, `[[`, \"fitted\")\n  )\n\n# Apply fitted y's as a new column\nresults = models %&gt;%\n  dplyr::select(-m, -l, -u) %&gt;%\n  tidyr::unnest(cols = c(data, contains(\"fitted\")))\n\n\nNow we can plot the means by age for both totals and peak variables:\n\nCode# name color vector as desired\nnames(col_vec) = c(\n  \"Actilife\",\n  \"ADEPT\",\n  \"Oak\",\n  \"Stepcount RF\",\n  \"Stepcount SSL\",\n  \"Verisense\",\n  \"Verisense rev.\"\n)\nresults %&gt;%\n  filter(grepl(\"step\", metric) & grepl(\"total\", metric)) %&gt;%\n  mutate(across(contains(\"fitted\"), ~ .x / 1000),\n         metric = factor(\n           metric,\n           levels = c(\n             \"total_actisteps\",\n             \"total_adeptsteps\",\n             \"total_oaksteps\",\n             \"total_scrfsteps\",\n             \"total_scsslsteps\",\n             \"total_vssteps\",\n             \"total_vsrevsteps\"\n           ),\n           labels = c(\n             \"Actilife\",\n             \"ADEPT\",\n             \"Oak\",\n             \"Stepcount RF\",\n             \"Stepcount SSL\",\n             \"Verisense\",\n             \"Verisense rev.\"\n           )\n         )) %&gt;%\n  ggplot(\n    aes(\n      x = age_in_years_at_screening,\n      y = fitted_mean,\n      ymin = fitted_lb,\n      ymax = fitted_ub,\n      color = metric,\n      fill = metric\n    )\n  ) +\n  facet_grid(. ~ metric) +\n  geom_line(linewidth = 1) +\n  geom_ribbon(alpha = .2, linetype = 0) +\n  scale_fill_manual(values = col_vec, name = \"Algorithm\") +\n  theme_light() +\n  scale_color_manual(values = col_vec, name = \"Algorithm\") +\n  geom_hline(aes(yintercept = 10),\n             col = \"darkgrey\",\n             linetype = \"dashed\") +\n  theme(\n    legend.position = c(0.65, 0.15),\n    legend.title = element_blank(),\n    strip.text = element_text(size = 12),\n    axis.title = element_text(size = 14),\n    title = element_text(size = 14),\n    axis.text = element_text(size = 12),\n    panel.grid.minor = element_blank(),\n    legend.text = element_text(size = 12)\n  ) +\n  labs(x = \"Age (years)\", y = \"Mean Daily Steps (x1000)\", title = \"Smoothed Survey Weighted Mean Daily Steps by Age \") +\n  scale_y_continuous(breaks = seq(0, 16, 1)) +\n  scale_x_continuous(breaks = seq(20, 80, 20)) + \n  guides(fill = guide_legend(nrow = 2, byrow = FALSE),\n         color = guide_legend(nrow = 2, byrow = FALSE))\n\n\n\n\n\n\nCode results %&gt;%\n  filter(grepl(\"peak\", metric) & grepl(\"step\", metric)) %&gt;%\n  mutate(\n    type = sub(\"_.*\", \"\", metric),\n    method = sub(\"^[^_]*_\", \"\", metric),\n    type = factor(type, labels = c(\"1-minute\", \"30-minute\"))\n  ) %&gt;%\n  filter(grepl(\"step\", metric)) %&gt;%\n  mutate(method = factor(\n    method,\n    levels = c(\n      \"actisteps\",\n      \"adeptsteps\",\n      \"oaksteps\",\n      \"scrfsteps\",\n      \"scsslsteps\",\n      \"vssteps\",\n      \"vsrevsteps\"\n    ),\n    labels = c(\n      \"Actilife\",\n      \"ADEPT\",\n      \"Oak\",\n      \"Stepcount RF\",\n      \"Stepcount SSL\",\n      \"Verisense\",\n      \"Verisense rev.\"\n    )\n  )) %&gt;%\n  ggplot(\n    aes(\n      x = age_in_years_at_screening,\n      y = fitted_mean,\n      ymin = fitted_lb,\n      ymax = fitted_ub,\n      fill = method,\n      color = method\n    )\n  ) +\n  facet_grid(. ~ type) +\n  geom_line() +\n  geom_ribbon(alpha = 0.2, color = NA) +\n  scale_fill_manual(values = col_vec, name = \"Algorithm\") +\n  scale_color_manual(values = col_vec, name = \"Algorithm\") +\n  theme_light() +\n  theme(\n    legend.title = element_blank(),\n    strip.text =  element_text(size = 12),\n    axis.title = element_text(size = 14),\n    title = element_text(size = 14),\n    axis.text = element_text(size = 12),\n    panel.grid.minor = element_blank(),\n    legend.text = element_text(size = 12),\n    legend.position = c(0.3, 0.1)\n  ) +\n  labs(x = \"Age (years)\", y = \"Peak Cadence (steps/min)\", title = \"Smoothed Survey Weighted Peak Cadence by Age\") +\n  scale_y_continuous(breaks = seq(20, 120, 10)) +\n  scale_x_continuous(breaks = seq(20, 80, 10)) + \n  guides(fill = guide_legend(nrow = 2, byrow = FALSE),\n         color = guide_legend(nrow = 2, byrow = FALSE))\n\n\n\n\n\n\n\nFinally, we can calculate the % change per year in the smoothed means and plot:\n\nCoderesults %&gt;%\n  filter(grepl(\"step\", metric) & grepl(\"total\", metric)) %&gt;%\n  mutate(metric = factor(\n    metric,\n    levels = c(\n      \"total_actisteps\",\n      \"total_adeptsteps\",\n      \"total_oaksteps\",\n      \"total_scrfsteps\",\n      \"total_scsslsteps\",\n      \"total_vssteps\",\n      \"total_vsrevsteps\"\n    ),\n    labels = c(\n      \"Actilife\",\n      \"ADEPT\",\n      \"Oak\",\n      \"Stepcount RF\",\n      \"Stepcount SSL\",\n      \"Verisense\",\n      \"Verisense rev.\"\n    )\n  )) %&gt;%\n  group_by(metric) %&gt;%\n  mutate(pct_chg = (fitted_mean - dplyr::lag(fitted_mean)) / dplyr::lag(fitted_mean) *\n           100) %&gt;%\n  ggplot(aes(\n    x = age_in_years_at_screening,\n    y = pct_chg,\n    color = metric,\n    fill = metric\n  )) +\n  geom_line(linewidth = 1) +\n  geom_ribbon(alpha = .2, linetype = 0, aes(ymax = 0, ymin = 0)) +\n  scale_fill_manual(values = col_vec, name = \"Algorithm\") +\n  theme_light() +\n  scale_color_manual(values = col_vec, name = \"Algorithm\") +\n  geom_hline(\n    aes(yintercept = 0),\n    col = \"darkgrey\",\n    linetype = \"dashed\",\n    linewidth = 1.1\n  ) +\n  theme_light() +\n  labs(x = \"Age (years)\", y = \"% change from previous year\", title = \"Survey weighted estimated per-year difference in mean daily steps\") +\n  theme(legend.title = element_blank(),\n        legend.position = c(0.4, 0.25),\n        axis.title = element_text(size = 14),\n        title = element_text(size = 14),\n        axis.text = element_text(size = 12),\n        strip.text = element_text(size = 12),\n        legend.text = element_text(size = 14)) +\n  scale_x_continuous(breaks = seq(20, 80, 10), limits = c(18, 79))+\n  guides(fill = guide_legend(nrow = 2, byrow = FALSE),\n         color = guide_legend(nrow = 2, byrow = FALSE))"
  },
  {
    "objectID": "vignettes/NHANES_Steps_Mortality_Vignette.html#correlations",
    "href": "vignettes/NHANES_Steps_Mortality_Vignette.html#correlations",
    "title": "NHANES Steps Vignette",
    "section": "Correlations",
    "text": "Correlations\nWe calculate the pairwise Spearman correlations between each step variable and physical activity variable, then plot the correlation matrix.\n\nCodecor_mat =\n  df_accel %&gt;% select(contains(\"total\")) %&gt;%\n  select(\n    contains(\"acti\"),\n    contains(\"adept\"),\n    contains(\"oak\"),\n    contains(\"sc\"),\n    contains(\"vss\"),\n    contains(\"vsr\"),\n    total_AC,\n    total_PAXMTSM,\n    total_log10AC,\n    total_log10PAXMTSM\n  ) %&gt;%\n  cor(., use = \"complete\", method = \"spearman\")\n\n# correlation p value matrix\npvals = df_accel %&gt;% select(contains(\"total\")) %&gt;%\n  select(\n    contains(\"acti\"),\n    contains(\"adept\"),\n    contains(\"oak\"),\n    contains(\"sc\"),\n    contains(\"vss\"),\n    contains(\"vsr\"),\n    total_AC,\n    total_PAXMTSM,\n    total_log10AC,\n    total_log10PAXMTSM\n  ) %&gt;%\n  rstatix::cor_pmat(.) %&gt;%\n  select(-rowname) %&gt;%\n  as.matrix()\n\n\ncolnames(cor_mat) = rownames(cor_mat) = colnames(pvals) = rownames(pvals) = c(\n  \"Actilife steps\",\n  \"ADEPT\",\n  \"Oak\",\n  \"Stepcount RF\",\n  \"Stepcount SSL\",\n  \"Verisense\",\n  \"Verisense rev.\",\n  \"AC\",\n  \"MIMS\",\n  \"log10 AC\",\n  \"log10 MIMS\"\n)\n\n# r for box around correlation\nr = c(\"ADEPT\", \"Actilife steps\", \"Verisense rev.\", \"Verisense\")\n\ncorrplot::corrplot(\n  cor_mat,\n  method = \"color\",\n  type = \"upper\",\n  col = paletteer_d(\"colorBlindness::Blue2Orange8Steps\"),\n  tl.col = \"black\",\n  tl.srt = 30,\n  p.mat = pvals,\n  col.lim = c(0.2, 1),\n  sig.level = 0.05,\n  insig = \"blank\",\n  is.corr = FALSE,\n  addgrid.col = \"white\",\n  diag = FALSE,\n  addCoef.col = 'black'\n) %&gt;%\n  corrplot::corrRect(namesMat  = r)\n\n\n\n\n\n\n\nWe can also plot the mean differences (x1000).\n\nCodemean_mat = function(df, abs = FALSE) {\n  # Ensure the input is a dataframe\n  if (!is.data.frame(df)) {\n    stop(\"Input must be a dataframe\")\n  }\n\n  # Check if all columns are numeric\n  if (!all(sapply(df, is.numeric))) {\n    stop(\"All columns in the dataframe must be numeric\")\n  }\n\n  # Get the number of columns\n  num_cols &lt;- ncol(df)\n\n  # Initialize a matrix to store the mean absolute differences\n  mad_matrix &lt;- matrix(NA, nrow = num_cols, ncol = num_cols)\n  rownames(mad_matrix) &lt;- colnames(df)\n  colnames(mad_matrix) &lt;- colnames(df)\n\n  # Calculate the mean absolute difference for each pair of columns\n  for (i in 1:num_cols) {\n    for (j in 1:num_cols) {\n      if (i &lt;= j) {\n        # Calculate mean absolute difference, handling potential NAs\n        if(abs){\n          d = abs(df[, i] - df[, j])\n        }\n        else{\n          d = df[, i] - df[, j]\n        }\n        # Debug output\n        # print(paste(\"Calculating MAD for columns\", colnames(df)[i], \"and\", colnames(df)[j]))\n        # print(head(abs_diff))\n\n        # Calculate mean\n        # mad_matrix[i, j] &lt;- mean(abs_diff %&gt;% unlist, na.rm = TRUE)\n        mad_matrix[i, j] &lt;- mean(d %&gt;% unlist, na.rm = TRUE)\n        mad_matrix[j, i] &lt;- mad_matrix[i, j]  # Symmetric matrix\n      }\n    }\n  }\n\n  return(mad_matrix)\n}\ndiff_mat =\n  df_accel %&gt;% select(contains(\"total\")) %&gt;%\n  select(\n    contains(\"acti\"),\n    contains(\"adept\"),\n    contains(\"oak\"),\n    contains(\"sc\"),\n    contains(\"vss\"),\n    contains(\"vsr\"),\n    total_AC,\n    total_PAXMTSM,\n    total_log10AC,\n    total_log10PAXMTSM\n  ) %&gt;%\n  mean_mat()\n# absolute difference matrix\nabs_diff_mat =\n  df_accel %&gt;% select(contains(\"total\")) %&gt;%\n  select(\n    contains(\"acti\"),\n    contains(\"adept\"),\n    contains(\"oak\"),\n    contains(\"sc\"),\n    contains(\"vss\"),\n    contains(\"vsr\"),\n    total_AC,\n    total_PAXMTSM,\n    total_log10AC,\n    total_log10PAXMTSM\n  ) %&gt;%\n  mean_mat(., abs = TRUE)\n\n# make NA for non-step algos\ndiff_mat[, c(\"total_AC\",\n             \"total_log10AC\",\n             \"total_PAXMTSM\",\n             \"total_log10PAXMTSM\")] &lt;- NA\ndiff_mat[c(\"total_AC\",\n           \"total_log10AC\",\n           \"total_PAXMTSM\",\n           \"total_log10PAXMTSM\"), ] &lt;- NA\ncolnames(diff_mat) = rownames(diff_mat) =  c(\n  \"Actilife steps\",\n  \"ADEPT\",\n  \"Oak\",\n  \"Stepcount RF\",\n  \"Stepcount SSL\",\n  \"Verisense\",\n  \"Verisense rev.\",\n  \"AC\",\n  \"MIMS\",\n  \"log10 AC\",\n  \"log10 MIMS\"\n)\ndiff_mat = diff_mat / 1000\ncorrplot::corrplot(\n  diff_mat,\n  method = \"color\",\n  type = \"lower\",\n  col = paletteer_c(\"grDevices::Purple-Green\", 10),\n  col.lim = c(-10, 10),\n  tl.col = \"black\",\n  tl.srt = 30,\n  insig = \"blank\",\n  is.corr = FALSE,\n  diag = FALSE,\n  # title = \"Mean Difference in Steps (x1000)\",\n  addgrid.col = \"white\",\n  addCoef.col = 'grey50',\n  na.label = \"-\"\n)"
  },
  {
    "objectID": "vignettes/NHANES_Steps_Mortality_Vignette.html#single-variable",
    "href": "vignettes/NHANES_Steps_Mortality_Vignette.html#single-variable",
    "title": "NHANES Steps Vignette",
    "section": "Single variable",
    "text": "Single variable\nTo investigate the association between each step algorithm and mortality, we fit a Cox proportional hazards model with the step algorithm as the only predictor. We also fit these single variable models with traditional predictors of mortality.\nSpecifically, we fit the following model:\n\\[\\text{coxph(Surv(followup\\_time, mortality)} \\sim \\text{predictor})\\]\nWhere \\(\\texttt{followup\\_time}\\) is the time to death or censoring, \\(\\texttt{mortality}\\) is the binary indicator of death, and \\(\\texttt{predictor}\\) is the step algorithm or traditional predictor. We perform 10-fold cross validation and estimate the mean concordance over the 10 folds of the model. We then repeat this process 100 times and calculate the mean concordance from the repeated models. The code below illustrates the process, but we have precomputed the results.\n\nCode# packages for parallel processing; not necessary but will speed up \nrequire(future)\nrequire(furrr)\n\n# make sure dataset meets criteria \ndf_mortality =\n  df_all %&gt;%\n  filter(valid_accel) %&gt;% # valid accelerometry\n  filter(age_in_years_at_screening &gt;= 50 &\n           age_in_years_at_screening &lt; 80) %&gt;%  # age criteria\n  filter(if_all(.cols = c(age_in_years_at_screening, gender,\n                          race_hispanic_origin, cat_education,\n                          cat_bmi, chd, chf, heartattack, stroke, cancer,\n                          bin_diabetes, cat_alcohol, cat_smoke, bin_mobilityproblem,\n                          general_health_condition, mortstat, permth_exm, total_PAXMTSM),\n                ~!is.na(.x))) %&gt;% # no missing data\n  mutate(event_time = permth_exm / 12) # event time in years = person months since exam / 12\n\n# winsorize at 99th percentile \ndf_mortality_win =\n  df_mortality %&gt;%\n  ungroup() %&gt;%\n  mutate(across(c(contains(\"total\"), contains(\"peak\")), ~winsorize(.x, quantile(.x, probs = c(0, 0.99)))))\n\n# concordance is survival metric \nsurvival_metrics = metric_set(concordance_survival)\n# proportional hazards model \n\nsurvreg_spec = proportional_hazards() %&gt;%\n  set_engine(\"survival\") %&gt;%\n  set_mode(\"censored regression\")\n\n# function to fit model on one variable \nfit_model = function(var, folds, spec, metrics, mort_df){\n  require(tidyverse); require(tidymodels); require(censored)\n  # create workflow\n  wflow = workflow() %&gt;%\n    add_model(spec) %&gt;%\n    add_variables(outcomes = mort_surv,\n                  predictors = all_of(var)) %&gt;%\n    add_case_weights(case_weights_imp)\n\n  # fit model on folds\n  res = fit_resamples(\n    wflow,\n    resamples = folds,\n    metrics = metrics,\n    control = control_resamples(save_pred = TRUE)\n  )\n\n  # get metrics -- for some reason if you just use collect_metrics it doesn't take into account case weights,\n  # so we write this function to get concordance\n  get_concordance = function(row_num, preds, surv_df){\n    preds %&gt;%\n      slice(row_num) %&gt;%\n      unnest(.predictions) %&gt;%\n      select(.pred_time, .row, mort_surv) %&gt;%\n      left_join(surv_df %&gt;% select(row_ind, case_weights_imp), by = c(\".row\" = \"row_ind\")) %&gt;%\n      concordance_survival(truth = mort_surv, estimate = \".pred_time\", case_weights = case_weights_imp) %&gt;%\n      pull(.estimate)\n  }\n\n  # get concordance for each fold\n  concordance_vec = map_dbl(.x = 1:nrow(res), .f = get_concordance, preds = res, surv_df = mort_df)\n  rm(res)\n  # return as tibble\n  tibble(concordance = concordance_vec,\n         variable = var)\n}\n\n# all of the variables we want to use in single variable prediction - traditional \ndemo_vars = c(\n  \"age_in_years_at_screening\",\n  \"cat_bmi\",\n  \"gender\",\n  \"race_hispanic_origin\",\n  \"bin_diabetes\",\n  \"cat_education\",\n  \"chf\",\n  \"chd\",\n  \"heartattack\",\n  \"stroke\",\n  \"cancer\",\n  \"cat_alcohol\",\n  \"cat_smoke\",\n  \"bin_mobilityproblem\",\n  \"general_health_condition\")\n\n# pa predictors \npa_vars =\n  df_mortality_win %&gt;%\n  select(contains(\"total\"), contains(\"peak\")) %&gt;%\n  colnames()\n\nvars = c(demo_vars, pa_vars)\n\n# normalize weights \ndf = df_mortality_win %&gt;%\n  mutate(weight = full_sample_2_year_mec_exam_weight / 2, weight_norm = weight / mean(weight))\n\n# create a survival object\nsurv_df =\n  df %&gt;%\n  mutate(mort_surv = Surv(event_time, mortstat)) %&gt;%\n  mutate(case_weights_imp = hardhat::importance_weights(weight_norm)) %&gt;%\n  mutate(row_ind = row_number())\n\n# set seed and generate 100x 10-folds \nset.seed(4575)\nfolds = vfold_cv(surv_df, v = 10, repeats = 100)\nfname = \"metrics_wtd_100_singlevar.rds\"\n\nplan(multisession, workers = ncores) # parallel setup \n# run on all variables \nresults =\n  furrr::future_map_dfr(\n    .x = vars,\n    .f = fit_model,\n    spec = survreg_spec,\n    metrics = survival_metrics,\n    folds = folds,\n    mort_df = surv_df,\n    .options = furrr_options(seed = TRUE, globals = TRUE)\n  )\n\nif(!dir.exists(here::here(\"results\"))){\n  dir.create(here::here(\"results\"))\n}\n# save results \nsaveRDS(results, here::here(\"results\", fname))\n\n\nWe read in the results, and make a table and figure ranking the variables in terms of concordance.\n\nCodewt_single = readRDS(here::here(\"results\", \"metrics_wtd_100_singlevar.rds\")) %&gt;%\n  group_by(variable) %&gt;%\n  mutate(ind = row_number(),\n         rep = floor((row_number()-1)/10)) %&gt;%\n  group_by(variable, rep) %&gt;%\n  summarize(concordance = mean(concordance)) # calculating mean concordance from each 10-fold repeat \n\ndf_mortality =\n  df_all %&gt;%\n  filter(num_valid_days &gt;= 3) %&gt;%\n  filter(age_in_years_at_screening &gt;= 50 &\n           age_in_years_at_screening &lt; 80)\n\n\n# data used for mortality analysis; Winsorized\ndf_mortality_win =\n  df_mortality %&gt;%\n  filter(if_all(.cols = c(age_in_years_at_screening, gender,\n                                  race_hispanic_origin, cat_education,\n                                  cat_bmi, chd, chf, heartattack, stroke, cancer,\n                                  bin_diabetes, cat_alcohol, cat_smoke, bin_mobilityproblem,\n                                  general_health_condition, mortstat, permth_exm),\n                ~!is.na(.x))) %&gt;%\n  mutate(event_time = permth_exm / 12) %&gt;%\n  ungroup() %&gt;%\n  mutate(across(c(contains(\"total\"), contains(\"peak\")), ~winsorize(.x, quantile(.x, probs = c(0, 0.99)))))\n\nvlabs = c(\n  \"Age (yrs)\",\n  \"Diabetes\",\n  \"Mobility problem\",\n  \"Cancer\",\n  \"Alcohol use\",\n  \"BMI Category\",\n  \"Education category\",\n  \"Smoking status\",\n  \"Congenital Heart Disease\",\n  \"Coronary Heart Failure\",\n  \"Gender\",\n  \"General health condition\",\n  \"Heart attack\",\n  \"Peak1 AC\",\n  \"Peak1 Actilife steps\",\n  \"Peak1 ADEPT steps\",\n  \"Peak1 log10 AC\",\n  \"Peak1 log10 MIMS\",\n  \"Peak1 Oak steps\",\n  \"Peak1 MIMS\",\n  \"Peak1 Stepcount RF steps\",\n  \"Peak1 Stepcount SSL steps\",\n  \"Peak1 Verisense rev. steps\",\n  \"Peak1 Verisense steps\",\n  \"Peak30 AC\",\n  \"Peak30 Actilife steps\",\n  \"Peak30 ADEPT steps\",\n  \"Peak30 log10 AC\",\n  \"Peak30 log10 MIMS\",\n  \"Peak30 Oak steps\",\n  \"Peak30 MIMS\",\n  \"Peak30 Stepcount RF steps\",\n  \"Peak30 Stepcount SSL steps\",\n  \"Peak30 Verisense rev. steps\",\n  \"Peak30 Verisense steps\",\n  \"Race/ethnicity\",\n  \"Stroke\",\n  \"AC\",\n  \"Actilife steps\",\n  \"ADEPT steps\",\n  \"log10 AC\",\n  \"log10 MIMS\",\n  \"Oak steps\",\n  \"MIMS\",\n  \"Stepcount RF steps\",\n  \"Stepcount SSL steps\",\n  \"Verisense rev. steps\",\n  \"Verisense steps\"\n)\n\ndata_summary = wt_single %&gt;%\n  group_by(variable) %&gt;%\n  summarize(across(concordance, list(\n    mean = ~ mean(.x), se = ~ sd(.x) / sqrt(n())\n  ))) %&gt;%\n  mutate(variable_fac = factor(\n    variable,\n    labels = vlabs\n  )) %&gt;%\n  filter(!grepl(\"peak\", variable))\n\ndf_means =\n  df_mortality_win %&gt;%\n  group_by(mortstat) %&gt;%\n  summarize(across(c(contains(\"total\"), contains(\"peak\"), contains(\"age\")), ~ mean(.x)),\n            across(c(bin_mobilityproblem, cancer, stroke, heartattack, chd, chf, bin_diabetes), ~sum(.x)/n()*100),\n            gender = sum(gender == \"Female\")/n()*100) %&gt;%\n  pivot_longer(cols = -mortstat) %&gt;%\n  pivot_wider(names_from = mortstat,\n              values_from = value,\n              names_prefix = 'died_') %&gt;%\n  rename(variable = name)\n\n# get the best variable based on concodance\nbest_var = data_summary %&gt;%\n  arrange(desc(concordance_mean)) %&gt;%\n  slice(1) %&gt;%\n  pull(variable)\n\nbest_var_vec = wt_single %&gt;%\n  filter(variable == best_var) %&gt;%\n  pull(concordance)\n\nt_tests = wt_single %&gt;%\n  group_by(variable) %&gt;%\n  filter(variable != best_var) %&gt;%\n  nest() %&gt;%\n  mutate(t_test = map(\n    data,\n    ~ t.test(\n      .x$concordance,\n      best_var_vec,\n      var.eq = FALSE,\n      paired = FALSE,\n      alternative = \"less\"\n    )\n  ),\n  res = map(t_test, tidy)) %&gt;%\n  unnest(res) %&gt;%\n  ungroup() %&gt;%\n  select(variable, p.value)\n\n# join t tests with summary data and make table\ntab = data_summary %&gt;%\n  left_join(t_tests) %&gt;%\n  left_join(df_means) %&gt;%\n  arrange(desc(concordance_mean)) %&gt;%\n  mutate(\n    variable_fac = forcats::fct_reorder(variable_fac, concordance_mean),\n    lb = concordance_mean - 1.96 * concordance_se,\n    ub = concordance_mean + 1.96 * concordance_se,\n    ci2 = sprintf(\"%0.3f\", round(concordance_mean, 3)),\n    ci = paste0(\n      sprintf(\"%0.3f\", round(concordance_mean, 3)),\n      \" (\",\n      sprintf(\"%0.3f\", round(lb, 3)),\n      \", \",\n      sprintf(\"%0.3f\", round(ub, 3)),\n      \")\"\n    )\n  ) %&gt;%\n  select(variable_fac,\n         ci2,\n         # ci,\n         # p.value,\n         total_alive = died_0,\n         total_deceased = died_1) %&gt;%\n  # mutate(pvalue = style_pvalue(p.value, digits = 3)) %&gt;%\n  # mutate(pvalue = ifelse(is.na(pvalue), \"---\", pvalue),\n  #        across(starts_with(\"mean\"), ~ if_else(is.na(.x), \"---\", as.character(round(\n  #          .x, 0\n  #        ))))) %&gt;%\n  rename(\n    Variable = variable_fac,\n    \"Mean\" = ci2,\n    # \"Mean (95% CI)\" = ci,\n    # \"p-value\" = pvalue,\n    \"Mean value among alive\" = total_alive,\n    \"Mean value among deceased\" = total_deceased\n  ) %&gt;%\n  gt::gt() %&gt;%\n  gt::fmt_number(columns = starts_with(\"mean\"), decimals = 0) %&gt;%\n  # gt::tab_style(\n  #   style = list(cell_text(weight = \"bold\")),\n  #   locations = cells_body(columns = everything(), rows = p.value &gt; 0.05 |\n  #                            is.na(p.value))\n  # ) %&gt;%\n  # gt::cols_hide(p.value) %&gt;%\n  tab_header(title = \"100x 10-fold Cross-Validated Single Variable Concordance\", subtitle = \"\") %&gt;%\n  # tab_footnote(footnote = \"p-value for one sided t-test comparing variable to variable with higest mean concordance\",\n  #              locations = cells_column_labels(columns = \"p-value\")) %&gt;%\n  cols_align(columns = everything(), align = \"left\"); tab\n\n\n\n\n\n\n100x 10-fold Cross-Validated Single Variable Concordance\n\n\nVariable\nMean\nMean value among alive\nMean value among deceased\n\n\n\n\nStepcount RF steps\n0.732\n10,591\n6,502\n\n\nADEPT steps\n0.725\n2,391\n1,380\n\n\nOak steps\n0.723\n10,845\n7,067\n\n\nVerisense rev. steps\n0.720\n8,021\n4,878\n\n\nVerisense steps\n0.716\n8,885\n5,885\n\n\nActilife steps\n0.710\n11,790\n8,740\n\n\nStepcount SSL steps\n0.702\n8,786\n5,784\n\n\nAC\n0.688\n2,454,243\n1,900,197\n\n\nMIMS\n0.682\n13,002\n10,438\n\n\nMobility problem\n0.675\n26\n57\n\n\nAge (yrs)\n0.673\n62\n68\n\n\nGeneral health condition\n0.662\nNA\nNA\n\n\nlog10 MIMS\n0.647\n987\n884\n\n\nlog10 AC\n0.630\n2,939\n2,708\n\n\nDiabetes\n0.594\n20\n37\n\n\nSmoking status\n0.589\nNA\nNA\n\n\nEducation category\n0.572\nNA\nNA\n\n\nAlcohol use\n0.551\nNA\nNA\n\n\nCongenital Heart Disease\n0.551\n5\n15\n\n\nCoronary Heart Failure\n0.549\n3\n15\n\n\nGender\n0.547\n53\n44\n\n\nHeart attack\n0.546\n5\n16\n\n\nCancer\n0.539\n14\n24\n\n\nStroke\n0.533\n5\n13\n\n\nBMI Category\n0.524\nNA\nNA\n\n\nRace/ethnicity\n0.524\nNA\nNA\n\n\n\n\n\n\n\nCodevar_labels =\n  tibble(\n    names =\n      unique(wt_single$variable),\n    labels = c(\n      \"Age at screening\",\n      \"Diabetes\",\n      \"Mobility problem\",\n      \"Cancer\",\n      \"Alcohol use\",\n      \"BMI Category\",\n      \"Education level\",\n      \"Smoking status\",\n      \"CHF\",\n      \"CHD\",\n      \"Gender\",\n      \"Self-reported health\",\n      \"Heart attack\",\n      \"Peak1 AC\",\n      \"Peak1 MIMS\",\n      \"Peak1 Actilife steps\",\n      \"Peak1 ADEPT steps\",\n      \"Peak1 log10 AC\",\n      \"Peak1 log10 MIMS\",\n      \"Peak1 Oak steps\",\n      \"Peak1 Stepcount RF steps\",\n      \"Peak1 Stepcount SSL steps\",\n      \"Peak1 Verisense rev. steps\",\n      \"Peak1 Verisense steps\",\n      \"Peak30 AC\",\n      \"Peak30 MIMS\",\n      \"Peak30 Actilife steps\",\n      \"Peak30 ADEPT steps\",\n      \"Peak30 log10 AC\",\n      \"Peak30 log10 MIMS\",\n      \"Peak30 Oak steps\",\n      \"Peak30 Stepcount RF steps\",\n      \"Peak30 Stepcount SSL steps\",\n      \"Peak30 Verisense rev. steps\",\n      \"Peak30 Verisense steps\",\n      \"Race/ethnicity\",\n      \"Stroke\",\n      \"AC\",\n      \"MIMS\",\n      \"Actilife steps\",\n      \"ADEPT steps\",\n      \"log10 AC\",\n      \"log10 MIMS\",\n      \"Oak steps\",\n      \"Stepcount RF steps\",\n      \"Stepcount SSL steps\",\n      \"Verisense rev. steps\",\n      \"Verisense steps\"\n    )\n  )\n\n\nwt_single %&gt;%\n  filter(!grepl(\"peak\", variable)) %&gt;%\n  mutate(var_group = case_when(\n    grepl(\"steps\", variable) ~ \"Step variable\",\n    grepl(\"total\", variable) ~ \"Non-step accelerometry variable\",\n    TRUE ~ \"Non-accelerometry variable\"\n  ),\n  var_group = factor(var_group, levels = c(\"Step variable\", \"Non-step accelerometry variable\", \"Non-accelerometry variable\"))) %&gt;%\n  group_by(variable, var_group) %&gt;%\n  summarize(mean = mean(concordance),\n            sd = sd(concordance),\n            se = sd(concordance)/sqrt(n())) %&gt;%\n  mutate(ci_low = mean - 1.96*se,\n         ci_high = mean + 1.96*se) %&gt;%\n  ungroup() %&gt;%\n  left_join(var_labels, by = c(\"variable\" = \"names\")) %&gt;%\n  mutate(labels = factor(labels),\n         labels = fct_reorder(labels, mean)) %&gt;%\n  ggplot(aes(y = labels, x = mean, xmin = ci_low, xmax = ci_high, color = var_group, shape = var_group))+\n  geom_point(size = 3) +\n  # geom_errorbarh(height = .3) +\n  theme_bw() +\n  # scale_color_manual(values = c(\"#CC79A7FF\", \"#009E73FF\", \"#0072B2FF\"), name = \"\")+\n  scale_color_manual(values = c(\"#FF6DB6\", \"#009292\", \"#006DDB\"), name = \"\")+ # colors from paletteer_d(\"colorBlindness::paletteMartin\")\n  scale_shape_manual(values = c(8, 17, 16), name = \"\")+\n  scale_x_continuous(limits=c(0.5, 0.75), breaks=seq(0.5, 0.75, .05))+\n  theme(legend.position = c(.35, .75),\n        legend.title = element_blank(),\n        legend.text = element_text(size = 14),\n        axis.title = element_text(size = 14),\n        axis.text.y = element_text(size = 12),\n        strip.text = element_text(size = 14))+\n  labs(x = \"Mean 100-times repeated 10-fold Cross-Validated Survey-Weighted Concordance\", y = \"\")\n\n\n\n\n\n\n\nWe can also compare the concordance for the peak variables vs. the total variables.\n\nCodewt_single %&gt;%\n  filter(grepl(\"peak\", variable) | grepl(\"steps\", variable)) %&gt;%\n  mutate(var_group = factor(case_when(\n    grepl(\"peak1\", variable) ~ \"Peak 1-min variable\",\n    grepl(\"peak30\", variable) ~ \"Peak 30-min variable\",\n    TRUE ~ \"Mean daily total variable\"\n  ), levels = c(\"Peak 1-min variable\", \"Peak 30-min variable\", \"Mean daily total variable\"))) %&gt;%\n  group_by(variable, var_group) %&gt;%\n  summarize(mean = mean(concordance),\n            sd = sd(concordance),\n            se = sd(concordance)/sqrt(n())) %&gt;%\n  # mutate(ci_low = mean - 1.96*se,\n  #        ci_high = mean + 1.96*se) %&gt;%\n  ungroup() %&gt;%\n  left_join(var_labels, by = c(\"variable\" = \"names\")) %&gt;%\n  mutate(labels = factor(labels),\n         labels = fct_reorder(labels, mean)) %&gt;%\n  # ggplot(aes(y = labels, x = mean, xmin = ci_low, xmax = ci_high, color = var_group, shape = var_group))+\n  ggplot(aes(y = labels, x = mean, color = var_group, shape = var_group))+\n  geom_point(size = 3) +\n  # geom_errorbarh() +\n  theme_bw() +\n  scale_shape_manual(values = c(3,15,18), name = \"\") + \n  # scale_shape_manual(values = c(1, 16, 17), name = \"\")+\n  # scale_color_manual(values = c(\"#E69F00FF\", \"#D55E00FF\", \"#56B4E9FF\"), name = \"\")+\n  scale_color_manual(values = c(\"#FF7F00\", \"#FFBF7F\", \"#654CFF\"), name = \"\")+ # from paletteer_d(\"colorBlindness::PairedColor12Steps\")\n  scale_x_continuous(limits=c(0.687, 0.738), breaks=seq(0.675, 0.775, .0125))+\n  theme(legend.position = c(.3, .7),\n        legend.title = element_blank(),\n        axis.text.y = element_text(size = 12),\n        axis.title= element_text(size = 14),\n        legend.text = element_text(size = 14),\n        strip.text = element_text(size = 14))+\n  labs(x = \"Mean 100-times repeated 10-fold Cross-Validated Survey-Weighted Concordance\", y = \"\")"
  },
  {
    "objectID": "vignettes/NHANES_Steps_Mortality_Vignette.html#multivariable",
    "href": "vignettes/NHANES_Steps_Mortality_Vignette.html#multivariable",
    "title": "NHANES Steps Vignette",
    "section": "Multivariable",
    "text": "Multivariable\nFor the multivariable analysis, we fit the four Cox proportional hazards models with the following predictors:\n\nTraditional predictors only (age, mobility problem, self reported health, diabetes, smoking status, education, gender, CHF, CHD, heart attack, stroke, cancer, alcohol use, BMI category, race/ethnicity)\nTraditional predictors & MIMS\nTraditional predictors & steps from stepcount RF\nTraditional predictors & steps from stepcount RF & MIMS\n\nWe use the same 100-times repeated 10-fold cross validation as before. Below is the code to run the multivariable models for a large combination of models; again, we prerun the code but include below.\n\nCoderequire(future)\nrequire(furrr)\nncores = parallelly::availableCores() - 1\n\ndf_mortality =\n  df_all %&gt;%\n  filter(valid_accel) %&gt;% # valid accelerometry\n  filter(age_in_years_at_screening &gt;= 50 &\n           age_in_years_at_screening &lt; 80) %&gt;%  # age criteria\n  filter(if_all(.cols = c(age_in_years_at_screening, gender,\n                          race_hispanic_origin, cat_education,\n                          cat_bmi, chd, chf, heartattack, stroke, cancer,\n                          bin_diabetes, cat_alcohol, cat_smoke, bin_mobilityproblem,\n                          general_health_condition, mortstat, permth_exm, total_PAXMTSM),\n                ~!is.na(.x))) %&gt;% # no missing data\n  mutate(event_time = permth_exm / 12) # event time in years = person months since exam / 12\n\ndf_mortality_win =\n  df_mortality %&gt;%\n  ungroup() %&gt;%\n  mutate(across(c(contains(\"total\"), contains(\"peak\")), ~winsorize(.x, quantile(.x, probs = c(0, 0.99)))))\n\n\nsurvival_metrics = metric_set(concordance_survival)\n\nsurvreg_spec = proportional_hazards() %&gt;%\n  set_engine(\"survival\") %&gt;%\n  set_mode(\"censored regression\")\n\n\n# create four workflows: demo only, demo + MIMS, demo + steps, demo + MIMS + steps\n# for each model, add case weights\ndemo_vars = c(\"age_in_years_at_screening\", \"cat_bmi\", \"gender\",\n              \"race_hispanic_origin\", \"bin_diabetes\", \"chf\", \"general_health_condition\",\n              \"chd\", \"heartattack\", \"cancer\", \"stroke\", \"cat_alcohol\", \"cat_smoke\",\n              \"bin_mobilityproblem\", \"cat_education\")\nfit_model = function(pred_vars, model_name, folds, spec, metrics, mort_df){\n  require(tidyverse); require(tidymodels); require(censored)\n  wflow =  workflow() %&gt;%\n    add_model(spec) %&gt;%\n    add_variables(outcomes = mort_surv,\n                  predictors = all_of(pred_vars)) %&gt;%\n    # predictors = c(all_of(demo_vars), all_of(add_vars))) %&gt;%\n    add_case_weights(case_weights_imp)\n\n  res = fit_resamples(\n    wflow,\n    resamples = folds,\n    metrics = metrics,\n    control = control_resamples(save_pred = TRUE)\n  )\n\n  get_concordance = function(row_num, preds, surv_df){\n    preds %&gt;%\n      slice(row_num) %&gt;%\n      unnest(.predictions) %&gt;%\n      select(.pred_time, .row, mort_surv) %&gt;%\n      left_join(surv_df %&gt;% select(row_ind, case_weights_imp), by = c(\".row\" = \"row_ind\")) %&gt;%\n      concordance_survival(truth = mort_surv, estimate = \".pred_time\", case_weights = case_weights_imp) %&gt;%\n      pull(.estimate)\n  }\n\n  concordance_vec = map_dbl(.x = 1:nrow(res), .f = get_concordance, preds = res, surv_df = mort_df)\n  rm(res)\n\n  tibble(concordance = concordance_vec,\n         model = model_name)\n}\n\n\nadd_vars_list = as.list(c(df_mortality_win %&gt;%\n                            select(contains(\"total\")) %&gt;% colnames()))\nstep_vars = df_mortality_win %&gt;% select(contains(\"steps\") & contains(\"total\")) %&gt;% colnames()\nstep_MIMS_list = lapply(step_vars, function(x){c(x, \"total_PAXMTSM\")})\nstep_lMIMS_list = lapply(step_vars, function(x){c(x, \"total_log10PAXMTSM\")})\n\nstep_AC_list = lapply(step_vars, function(x){c(x, \"total_AC\")})\nstep_lAC_list = lapply(step_vars, function(x){c(x, \"total_log10AC\")})\n\nall_list = c(add_vars_list, step_MIMS_list,step_lMIMS_list,step_lAC_list, step_AC_list)\npreds_list = lapply(all_list, function(x){c(x, demo_vars)})\npreds_list[[length(preds_list) + 1]] = demo_vars\nmodel_names =\n  map(all_list, .f = function(x){paste(sub(\".*total\\\\_\", \"\", x), collapse = \"+\")})\nmodel_names[[length(model_names) + 1]] = \"Demo only\"\n\ndf = df_mortality_win %&gt;%\n  mutate(weight = full_sample_2_year_mec_exam_weight / 2, weight_norm = weight / mean(weight))\n# create a survival object\nsurv_df =\n  df %&gt;%\n  mutate(mort_surv = Surv(event_time, mortstat)) %&gt;%\n  mutate(case_weights_imp = hardhat::importance_weights(weight_norm)) %&gt;%\n  mutate(row_ind = row_number())\nset.seed(4575)\nfolds = vfold_cv(surv_df, v = 10, repeats = 100)\nfname = \"metrics_wtd_100.rds\"\n\n\nplan(multisession, workers = ncores)\nresults =\n  furrr::future_map2_dfr(\n    .x = preds_list,\n    .y = model_names,\n    .f = fit_model,\n    spec = survreg_spec,\n    metrics = survival_metrics,\n    folds = folds,\n    mort_df = surv_df,\n    .options = furrr_options(seed = TRUE, globals = TRUE)\n  )\n\nsaveRDS(\n  results,\n  here::here(\"results\", fname)\n)\n\n\nWe can make a table comparing the four models as follows:\n\nCode# read in results\nwt_all = readRDS(here::here(\"results\", \"metrics_wtd_100.rds\")) %&gt;%\n  group_by(model) %&gt;%\n  mutate(ind = row_number(),\n         rep = floor((row_number()-1)/10)) %&gt;%\n  group_by(model, rep) %&gt;%\n  summarize(concordance = mean(concordance)) %&gt;%\n  ungroup()\n\nwt_small =\n  wt_all %&gt;%\n  filter(model %in% c(\"Demo only\", \"scrfsteps+PAXMTSM\", \"scrfsteps\", \"PAXMTSM\"))\n\nsummary =\n  wt_small %&gt;%\n  group_by(model) %&gt;%\n  summarize(across(concordance, list(mean = ~mean(.x),\n                                     se = ~sd(.x)/sqrt(n())))) %&gt;%\n  mutate(model_fac = factor(model, labels = c(\"Traditional predictors only\",\n                                              \"Traditional predictors + MIMS\",\n                                              \"Traditional predictors + SCRF steps\",\n                                              \"Traditional predictors + SCRF steps + MIMS\")))\n# get coefficients from steps model\ncoef_scrf =\n  df_mortality_win %&gt;%\n  mutate(\n    weight = full_sample_2_year_mec_exam_weight / 2,\n    weight_norm = weight / mean(weight)) %&gt;%\n  coxph(Surv(event_time, mortstat) ~ total_scrfsteps +\n          age_in_years_at_screening + cat_education + bin_diabetes + cat_bmi +\n          race_hispanic_origin + chf + general_health_condition + chd +\n          heartattack + cancer + stroke + cat_alcohol + cat_smoke +\n          bin_mobilityproblem, weights = weight_norm, data  = .) %&gt;%\n  tidy() %&gt;%\n  select(term, estimate, std.error, robust.se, p.value) %&gt;%\n  filter(grepl(\"steps\", term)) %&gt;%\n  mutate(hr = exp(estimate * 500),\n         lb = exp((estimate - 1.96 * std.error) * 500),\n         ub = exp((estimate + 1.96 * std.error) * 500),\n         model = \"scrfsteps\")\n# coef from MIMS model\ncoef_mims =\n  df_mortality_win %&gt;%\n  mutate(\n    weight = full_sample_2_year_mec_exam_weight / 2,\n    weight_norm = weight / mean(weight)) %&gt;%\n  coxph(Surv(event_time, mortstat) ~ total_PAXMTSM + total_scrfsteps +\n          age_in_years_at_screening + cat_education + bin_diabetes + cat_bmi +\n          race_hispanic_origin + chf + general_health_condition + chd +\n          heartattack + cancer + stroke + cat_alcohol + cat_smoke +\n          bin_mobilityproblem, weights = weight_norm, data  = .) %&gt;%\n  tidy() %&gt;%\n  select(term, estimate, std.error, robust.se, p.value) %&gt;%\n  filter(grepl(\"steps\", term)) %&gt;%\n  mutate(hr = exp(estimate * 500),\n         lb = exp((estimate - 1.96 * std.error) * 500),\n         ub = exp((estimate + 1.96 * std.error) * 500),\n         model = \"scrfsteps+PAXMTSM\")\n\ncoefs = bind_rows(coef_scrf, coef_mims)\n# print summary\ntab = summary %&gt;%\n  left_join(coefs)  %&gt;%\n  mutate(conc_lb = concordance_mean - 1.96 * concordance_se,\n         conc_ub = concordance_mean + 1.96 * concordance_se,\n          conc_ci2 = sprintf(\"%0.3f\",round(concordance_mean, 3)),  \n         conc_ci = paste0(sprintf(\"%0.3f\",round(concordance_mean, 3)),\n                          \" (\", sprintf(\"%0.3f\",round(conc_lb, 3)), \", \", sprintf(\"%0.3f\",round(conc_ub, 3)), \")\"),\n         hr_ci = case_when(!is.na(hr) ~ paste0(sprintf(\"%0.3f\",round(hr, 3)),\n                                               \" (\", sprintf(\"%0.3f\",round(lb, 3)), \", \", sprintf(\"%0.3f\",round(ub, 3)), \")\"),\n                           TRUE ~ \"---\"),\n         p.value = if_else(is.na(p.value), \"---\", format.pval(p.value, digits = 3))) %&gt;%\n  select(model_fac, hr_ci,p.value, conc_ci, conc_ci2) %&gt;%\n  rename(Model = model_fac,\n         \"Steps HR\" = hr_ci,\n         \"Steps p-value\" = p.value,\n         \"Model concordance\" = conc_ci2) %&gt;%\n  gt::gt() %&gt;%\n  # gt::fmt_number(columns = starts_with(\"mean\"), decimals = 0) %&gt;%\n  tab_header(title = \"Multivariable Model Comparison\") %&gt;%\n  cols_align(columns = everything(), align = \"left\"); tab\n\n\n\n\n\n\nMultivariable Model Comparison\n\n\nModel\nSteps HR\nSteps p-value\nconc_ci\nModel concordance\n\n\n\n\nTraditional predictors only\n---\n---\n0.769 (0.769, 0.770)\n0.769\n\n\nTraditional predictors + MIMS\n---\n---\n0.773 (0.772, 0.774)\n0.773\n\n\nTraditional predictors + SCRF steps\n0.955 (0.940, 0.970)\n5.85e-05\n0.776 (0.775, 0.777)\n0.776\n\n\nTraditional predictors + SCRF steps + MIMS\n0.961 (0.939, 0.983)\n0.0361\n0.774 (0.773, 0.775)\n0.774\n\n\n\n\n\n\nWe can also make a table of the hazard ratios associated with an (a) increase of 500 steps and (b) increase of 1 standard deviation in steps.\n\nCode# get PA variables\npa_vars = df_mortality_win %&gt;%\n  select(contains(\"total\") & contains(\"steps\")) %&gt;%\n  colnames()\n\n# create DF that is scaled steps\ndf_mortality_win_scaled =\n  df_mortality_win %&gt;%\n  mutate(across(c(contains(\"total\")), ~scale(.x)))\n\n# get standard deviations\nsds =\n  df_mortality_win %&gt;%\n  summarize(across(c(contains(\"total\")), ~sd(.x)/1000)) %&gt;%\n  pivot_longer(cols = contains(\"total\")) %&gt;%\n  mutate(value = round(value, digits = 1),\n         value = sprintf(\"%.1f\",value)) %&gt;%\n  left_join(var_labels, by = c(\"name\" = \"names\"))\n\n# function to fit model on all data w/ all covariates\nfit_model = function(var, df) {\n  df = df %&gt;%\n    mutate(weight = full_sample_2_year_mec_exam_weight / 2, \n           weight_norm = weight / mean(weight))\n  formula = as.formula(\n    paste0(\n      \"Surv(event_time, mortstat) ~\",\n      var,\n      \"+\n      age_in_years_at_screening + cat_education + bin_diabetes + cat_bmi +\n      race_hispanic_origin +\n      gender +\n      cat_bmi +\n      cat_education +\n      chf +\n      chd +\n      heartattack +\n      stroke +\n      cancer +\n      bin_diabetes +\n      cat_alcohol +\n      cat_smoke +\n      bin_mobilityproblem +\n      general_health_condition\"\n    )\n  )\n  coxph(formula, data = df, weights = weight_norm) %&gt;%\n    tidy() %&gt;%\n    filter(grepl(var, term))\n}\n\nsteps_res =\n  map_dfr(.x = pa_vars,\n          .f = fit_model,\n          df = df_mortality_win) %&gt;%\n  mutate(hr = exp(estimate * 500),\n         ci_low = exp(500*(estimate - (1.96 * std.error))),\n         ci_high = exp(500*(estimate + (1.96 * std.error))))\n\nsteps_res_scaled =\n  map_dfr(.x = c(pa_vars, \"total_PAXMTSM\", \"total_AC\"),\n          .f = fit_model,\n          df = df_mortality_win_scaled) %&gt;%\n  mutate(hr = exp(estimate),\n         ci_low = exp(estimate - (1.96 * std.error)),\n         ci_high = exp(estimate + (1.96 * std.error))) %&gt;%\n  left_join(var_labels, by = c(\"term\" = \"names\"))\n\n\ntab = steps_res %&gt;%\n  select(term, hr, p.value, ci_low, ci_high) %&gt;%\n  mutate(type = \"raw\") %&gt;%\n  bind_rows(\n    steps_res_scaled %&gt;% select(term, hr, p.value, ci_low, ci_high) %&gt;% mutate(type = \"scaled\")\n  ) %&gt;%\n  pivot_wider(names_from = type, values_from = -term) %&gt;%\n  filter(grepl(\"step\", term)) %&gt;%\n  left_join(sds, by = c(\"term\" = \"name\")) %&gt;%\n  arrange(labels) %&gt;%\n  mutate(\n    variable_fac = forcats::fct_reorder(term, hr_scaled, mean),\n    ci_raw = paste0(\n      sprintf(\"%0.2f\", round(hr_raw, 2)),\n      \" (\",\n      sprintf(\"%0.2f\", round(ci_low_raw, 2)),\n      \", \",\n      sprintf(\"%0.2f\", round(ci_high_raw, 2)),\n      \")\"\n    ),\n    ci_sc = paste0(\n      sprintf(\"%0.2f\", round(hr_scaled, 2)),\n      \" (\",\n      sprintf(\"%0.2f\", round(ci_low_scaled, 2)),\n      \", \",\n      sprintf(\"%0.2f\", round(ci_high_scaled, 2)),\n      \")\"\n    )\n  ) %&gt;%\n  select(\n    \"Variable\" = labels,\n    \"HR, Raw\" = ci_raw,\n    \"HR, Scaled\" = ci_sc,\n    \"SD\" = value\n  ) %&gt;%\n  gt::gt() %&gt;%\n  cols_align(columns = everything(), align = \"left\") %&gt;% \n  gt::tab_header(title = \"Hazard Ratios for 500 Step Increase and 1 Standard Deviation Increase in Steps\")\ntab\n\n\n\n\n\n\nHazard Ratios for 500 Step Increase and 1 Standard Deviation Increase in Steps\n\n\nVariable\nHR, Raw\nHR, Scaled\nSD\n\n\n\n\nADEPT steps\n0.88 (0.83, 0.93)\n0.67 (0.56, 0.80)\n1.5\n\n\nActilife steps\n0.95 (0.93, 0.97)\n0.67 (0.58, 0.78)\n4.0\n\n\nOak steps\n0.95 (0.94, 0.97)\n0.63 (0.54, 0.74)\n4.9\n\n\nStepcount RF steps\n0.95 (0.94, 0.97)\n0.59 (0.50, 0.70)\n5.4\n\n\nStepcount SSL steps\n0.96 (0.94, 0.97)\n0.67 (0.57, 0.79)\n4.4\n\n\nVerisense rev. steps\n0.95 (0.93, 0.97)\n0.63 (0.54, 0.75)\n4.4\n\n\nVerisense steps\n0.95 (0.93, 0.97)\n0.65 (0.55, 0.76)\n4.0"
  },
  {
    "objectID": "vignettes/NHANES_Steps_Mortality_Vignette.html#footnotes",
    "href": "vignettes/NHANES_Steps_Mortality_Vignette.html#footnotes",
    "title": "NHANES Steps Vignette",
    "section": "Footnotes",
    "text": "Footnotes\n\nhttps://pubmed.ncbi.nlm.nih.gov/31545345/↩︎\nhttps://www.nature.com/articles/s41746-022-00745-z↩︎\nhttps://github.com/ShimmerEngineering/Verisense-Toolbox/tree/master/Verisense_step_algorithm↩︎\nhttps://www.medrxiv.org/content/10.1101/2023.02.20.23285750v1↩︎"
  }
]